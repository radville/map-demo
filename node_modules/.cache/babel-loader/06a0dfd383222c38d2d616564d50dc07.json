{"ast":null,"code":"var _jsxFileName = \"/Users/Laura/Development/solar-calculator/src/scripts/geometryService.js\";\n// Adapted from \"Geometry Service - Calculate geometry\"\n// at https://developers.arcgis.com/javascript/3/jssamples/util_measurepoly.html\nimport React from 'react';\nexport function geometryService(map) {\n  console.log(\"here\");\n\n  require([\"dojo/dom\", \"dojo/_base/lang\", \"dojo/json\", \"esri/config\", \"esri/map\", \"esri/graphic\", \"esri/geometry/Geometry\", \"esri/geometry/Extent\", \"esri/SpatialReference\", \"esri/tasks/GeometryService\", \"esri/tasks/AreasAndLengthsParameters\", \"esri/toolbars/draw\", \"esri/symbols/SimpleFillSymbol\"], function (dom, lang, json, esriConfig, Map, Graphic, Geometry, Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol) {\n    //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n    //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n    esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n    esriConfig.defaults.io.alwaysUseProxy = false;\n    map.on(\"load\", function () {\n      var tb = new Draw(map);\n      tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n      tb.activate(Draw.FREEHAND_POLYGON);\n    });\n    var geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n    geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n\n    function getAreaAndLength(evtObj) {\n      var map = this,\n          geometry = evtObj.geometry;\n      map.graphics.clear();\n      var graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol())); //setup the parameters for the areas and lengths operation\n\n      var areasAndLengthParams = new AreasAndLengthsParameters();\n      areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      areasAndLengthParams.calculationType = \"geodesic\";\n      geometryService.simplify([geometry], function (simplifiedGeometries) {\n        areasAndLengthParams.polygons = simplifiedGeometries;\n        geometryService.areasAndLengths(areasAndLengthParams);\n      });\n    }\n\n    function outputAreaAndLength(evtObj) {\n      var result = evtObj.result;\n      console.log(json.stringify(result));\n      dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n    }\n  });\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"here\");\n}\nexport default geometryService;","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/src/scripts/geometryService.js"],"names":["React","geometryService","map","console","log","require","dom","lang","json","esriConfig","Map","Graphic","Geometry","Extent","SpatialReference","GeometryService","AreasAndLengthsParameters","Draw","SimpleFillSymbol","defaults","io","proxyUrl","alwaysUseProxy","on","tb","hitch","getAreaAndLength","activate","FREEHAND_POLYGON","outputAreaAndLength","evtObj","geometry","graphics","clear","graphic","add","areasAndLengthParams","lengthUnit","UNIT_FOOT","areaUnit","UNIT_ACRES","calculationType","simplify","simplifiedGeometries","polygons","areasAndLengths","result","stringify","byId","innerHTML","areas","toFixed","lengths"],"mappings":"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","sourcesContent":["// Adapted from \"Geometry Service - Calculate geometry\"\n// at https://developers.arcgis.com/javascript/3/jssamples/util_measurepoly.html\nimport React from 'react';\n\nexport function geometryService(map) {\n    console.log(\"here\")\n\nrequire([\"dojo/dom\",\n          \"dojo/_base/lang\",\n          \"dojo/json\",\n          \"esri/config\",\n          \"esri/map\",\n          \"esri/graphic\",\n          \"esri/geometry/Geometry\",\n          \"esri/geometry/Extent\",\n          \"esri/SpatialReference\",\n          \"esri/tasks/GeometryService\",\n          \"esri/tasks/AreasAndLengthsParameters\",\n          \"esri/toolbars/draw\",\n          \"esri/symbols/SimpleFillSymbol\"],\n    function(dom, lang, json, esriConfig, Map, Graphic, Geometry, Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol){\n\n      //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n      //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n      esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n      esriConfig.defaults.io.alwaysUseProxy = false;\n\n      map.on(\"load\", function() {\n        var tb = new Draw(map);\n        tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n        tb.activate(Draw.FREEHAND_POLYGON);\n      });\n      \n      var geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n\n    function getAreaAndLength(evtObj) {\n      var map = this,\n          geometry = evtObj.geometry;\n      map.graphics.clear();\n      \n      var graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n      \n      //setup the parameters for the areas and lengths operation\n      var areasAndLengthParams = new AreasAndLengthsParameters();\n      areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      areasAndLengthParams.calculationType = \"geodesic\";\n      geometryService.simplify([geometry], function(simplifiedGeometries) {\n        areasAndLengthParams.polygons = simplifiedGeometries;\n        geometryService.areasAndLengths(areasAndLengthParams);\n      });\n    }\n\n    function outputAreaAndLength(evtObj) {\n      var result = evtObj.result;\n      console.log(json.stringify(result));\n      dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n    }\n  });\n  return <div>here</div>\n}\n\nexport default geometryService;"]},"metadata":{},"sourceType":"module"}