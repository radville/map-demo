{"ast":null,"code":"var _jsxFileName = \"/Users/Laura/Development/map-demo/src/components/WebMapView.js\";\n// Adapted from ArcGIS tutorials, including:\n// \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\n// and \"Draw Graphics\" at https://developers.arcgis.com/labs/javascript/draw-graphics/\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\nimport Legend from '../components/Legend';\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.state = {\n      area: ''\n    };\n  }\n\n  componentDidMount() {\n    changeLegendValues = area => {\n      this.setState({\n        area\n      });\n    }; // lazy load the required ArcGIS API for JavaScript modules and CSS\n\n\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/widgets/Search', \"esri/layers/GraphicsLayer\", \"esri/widgets/Sketch\", \"esri/geometry/geometryEngine\"], {\n      css: true\n    }).then(([ArcGISMap, MapView, Search, GraphicsLayer, Sketch, geometryEngine]) => {\n      // create map\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      }); // add map view\n\n      let view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-100, 38],\n        zoom: 4\n      }); // add searchbar \n\n      let search = new Search({\n        view: view\n      });\n      view.ui.add(search, \"top-right\"); // add graphics layer to be used by sketch toolbar\n\n      let graphicsLayer = new GraphicsLayer();\n      map.add(graphicsLayer); // Add the Sketch toolbar to draw polygons\n\n      let sketch = new Sketch({\n        view: view,\n        layer: graphicsLayer,\n        availableCreateTools: [\"polyline\", \"polygon\", \"rectangle\"]\n      }); // add sketch toolbar to top corner\n\n      view.ui.add(sketch, \"top-left\"); // when polygon is created, calculate area\n\n      sketch.on(\"create\", function (event) {\n        if (event.state === \"complete\") {\n          let geometry = event.graphic.geometry.extent; // area in square meters, accounts for curve of Earth, rounded to nearest number\n\n          let area = geometryEngine.geodesicArea(geometry, 109404); // add values to legend\n\n          changeLegendValues(area);\n        }\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"webmap esri\",\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      area: this.state.area,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n;\nexport default WebMapView;","map":{"version":3,"sources":["/Users/Laura/Development/map-demo/src/components/WebMapView.js"],"names":["React","loadModules","Legend","WebMapView","Component","constructor","props","mapRef","createRef","state","area","componentDidMount","changeLegendValues","setState","css","then","ArcGISMap","MapView","Search","GraphicsLayer","Sketch","geometryEngine","map","basemap","view","container","current","center","zoom","search","ui","add","graphicsLayer","sketch","layer","availableCreateTools","on","event","geometry","graphic","extent","geodesicArea","componentWillUnmount","render"],"mappings":"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","sourcesContent":["// Adapted from ArcGIS tutorials, including:\n// \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\n// and \"Draw Graphics\" at https://developers.arcgis.com/labs/javascript/draw-graphics/\n\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\nimport Legend from '../components/Legend';\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.state = { area: '' };\n  }\n\n  componentDidMount() {\n\n    changeLegendValues = (area) => {\n      this.setState({ area })\n    }\n\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', \n      'esri/views/MapView', \n      'esri/widgets/Search',\n      \"esri/layers/GraphicsLayer\",\n      \"esri/widgets/Sketch\",\n      \"esri/geometry/geometryEngine\"], { css: true })\n    .then(([ArcGISMap, MapView, Search, GraphicsLayer, Sketch, geometryEngine]) => {\n\n      // create map\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n\n      // add map view\n      let view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-100, 38],\n        zoom: 4\n      });\n      \n      // add searchbar \n      let search = new Search({\n        view: view\n      });\n      view.ui.add(search, \"top-right\");\n\n      // add graphics layer to be used by sketch toolbar\n      let graphicsLayer = new GraphicsLayer();\n      map.add(graphicsLayer)\n\n      // Add the Sketch toolbar to draw polygons\n      let sketch = new Sketch({\n        view: view,\n        layer: graphicsLayer,\n        availableCreateTools: [\"polyline\", \"polygon\", \"rectangle\"],\n      })\n\n      // add sketch toolbar to top corner\n      view.ui.add(sketch, \"top-left\")\n\n      // when polygon is created, calculate area\n      sketch.on(\"create\", function(event) {\n        if (event.state === \"complete\") {\n          let geometry = event.graphic.geometry.extent\n\n          // area in square meters, accounts for curve of Earth, rounded to nearest number\n          let area = geometryEngine.geodesicArea(geometry, 109404)\n\n          // add values to legend\n          changeLegendValues(area)\n        }       \n      });\n      \n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"webmap esri\" ref={this.mapRef} />      \n        <Legend area={this.state.area} />\n      </div>\n    )\n  }\n};\n\nexport default WebMapView;"]},"metadata":{},"sourceType":"module"}