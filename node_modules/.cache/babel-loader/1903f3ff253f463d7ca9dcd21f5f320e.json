{"ast":null,"code":"var _jsxFileName = \"/Users/Laura/Development/solar-calculator/src/components/WebMapView.js\";\n// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\nimport geometryService from '../scripts/geometryService';\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', 'esri/views/MapView'], {\n      css: true\n    }).then(([ArcGISMap, MapView]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n      this.view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-118, 34],\n        zoom: 8\n      });\n    }).then(() => {\n      require([\"dojo/dom\", \"dojo/_base/lang\", \"dojo/json\", \"esri/config\", \"esri/map\", \"esri/graphic\", \"esri/geometry/Geometry\", \"esri/geometry/Extent\", \"esri/SpatialReference\", \"esri/tasks/GeometryService\", \"esri/tasks/AreasAndLengthsParameters\", \"esri/toolbars/draw\", \"esri/symbols/SimpleFillSymbol\"], function (dom, lang, json, esriConfig, Map, Graphic, Geometry, Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol) {\n        //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n        //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n        esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n        esriConfig.defaults.io.alwaysUseProxy = false;\n        var map = new Map(\"mapDiv\", {\n          basemap: \"topo\",\n          center: [-122.778, 45.483],\n          zoom: 15\n        });\n        map.on(\"load\", function () {\n          var tb = new Draw(map);\n          tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n          tb.activate(Draw.FREEHAND_POLYGON);\n        });\n        var geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n        geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n\n        function getAreaAndLength(evtObj) {\n          var map = this,\n              geometry = evtObj.geometry;\n          map.graphics.clear();\n          var graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol())); //setup the parameters for the areas and lengths operation\n\n          var areasAndLengthParams = new AreasAndLengthsParameters();\n          areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n          areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n          areasAndLengthParams.calculationType = \"geodesic\";\n          geometryService.simplify([geometry], function (simplifiedGeometries) {\n            areasAndLengthParams.polygons = simplifiedGeometries;\n            geometryService.areasAndLengths(areasAndLengthParams);\n          });\n        }\n\n        function outputAreaAndLength(evtObj) {\n          var result = evtObj.result;\n          console.log(json.stringify(result));\n          dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n          dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n        }\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"webmap\",\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/src/components/WebMapView.js"],"names":["React","loadModules","geometryService","WebMapView","Component","constructor","props","mapRef","createRef","componentDidMount","css","then","ArcGISMap","MapView","map","basemap","view","container","current","center","zoom","require","dom","lang","json","esriConfig","Map","Graphic","Geometry","Extent","SpatialReference","GeometryService","AreasAndLengthsParameters","Draw","SimpleFillSymbol","defaults","io","proxyUrl","alwaysUseProxy","on","tb","hitch","getAreaAndLength","activate","FREEHAND_POLYGON","outputAreaAndLength","evtObj","geometry","graphics","clear","graphic","add","areasAndLengthParams","lengthUnit","UNIT_FOOT","areaUnit","UNIT_ACRES","calculationType","simplify","simplifiedGeometries","polygons","areasAndLengths","result","console","log","stringify","byId","innerHTML","areas","toFixed","lengths","componentWillUnmount","render"],"mappings":"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","sourcesContent":["// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\n\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\nimport geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', 'esri/views/MapView'], { css: true })\n    .then(([ArcGISMap, MapView]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n\n      this.view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-118, 34],\n        zoom: 8\n      });\n    })\n    .then(() => {\n      require([\"dojo/dom\",\n          \"dojo/_base/lang\",\n          \"dojo/json\",\n          \"esri/config\",\n          \"esri/map\",\n          \"esri/graphic\",\n          \"esri/geometry/Geometry\",\n          \"esri/geometry/Extent\",\n          \"esri/SpatialReference\",\n          \"esri/tasks/GeometryService\",\n          \"esri/tasks/AreasAndLengthsParameters\",\n          \"esri/toolbars/draw\",\n          \"esri/symbols/SimpleFillSymbol\"],\n    function(dom, lang, json, esriConfig, Map, Graphic, Geometry, Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol){\n\n      //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n      //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n      esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n      esriConfig.defaults.io.alwaysUseProxy = false;\n\n      var map = new Map(\"mapDiv\", {\n        basemap: \"topo\",\n        center: [-122.778, 45.483],\n        zoom: 15\n      });\n      \n      map.on(\"load\", function() {\n        var tb = new Draw(map);\n        tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n        tb.activate(Draw.FREEHAND_POLYGON);\n      });\n      \n      var geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n\n    function getAreaAndLength(evtObj) {\n      var map = this,\n          geometry = evtObj.geometry;\n      map.graphics.clear();\n      \n      var graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n      \n      //setup the parameters for the areas and lengths operation\n      var areasAndLengthParams = new AreasAndLengthsParameters();\n      areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      areasAndLengthParams.calculationType = \"geodesic\";\n      geometryService.simplify([geometry], function(simplifiedGeometries) {\n        areasAndLengthParams.polygons = simplifiedGeometries;\n        geometryService.areasAndLengths(areasAndLengthParams);\n      });\n    }\n\n    function outputAreaAndLength(evtObj) {\n      var result = evtObj.result;\n      console.log(json.stringify(result));\n      dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n    }\n  });\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"webmap\" ref={this.mapRef} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}