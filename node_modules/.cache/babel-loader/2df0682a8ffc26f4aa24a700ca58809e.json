{"ast":null,"code":"var _jsxFileName = \"/Users/Laura/Development/solar-calculator/src/components/WebMapView.js\";\n// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\nimport React from 'react';\nimport { loadModules } from 'esri-loader'; // import geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', 'esri/views/MapView'], {\n      css: true\n    }).then(([ArcGISMap, MapView]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n      this.view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-118, 34],\n        zoom: 8\n      });\n    }).then(() => addGeometryService());\n  }\n\n  addGeometryService() {\n    require([\"dojo/dom\", \"dojo/_base/lang\", \"dojo/json\", \"esri/config\", \"esri/map\", \"esri/graphic\", \"esri/geometry/Geometry\", \"esri/geometry/Extent\", \"esri/SpatialReference\", \"esri/tasks/GeometryService\", \"esri/tasks/AreasAndLengthsParameters\", \"esri/toolbars/draw\", \"esri/symbols/SimpleFillSymbol\"], function (dom, lang, json, esriConfig, Map, Graphic, Geometry, Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol) {\n      //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n      //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n      esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n      esriConfig.defaults.io.alwaysUseProxy = false;\n      map.on(\"load\", function () {\n        var tb = new Draw(map);\n        tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n        tb.activate(Draw.FREEHAND_POLYGON);\n      });\n      let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      geometryService.on(\"areas-and-lengths-complete\", outputAreaAndPower);\n\n      function getAreaAndLength(evtObj) {\n        let map = this,\n            geometry = evtObj.geometry;\n        map.graphics.clear();\n        let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol())); //setup the parameters for the area and power calculation\n\n        var areasAndLengthParams = new AreasAndLengthsParameters();\n        areasAndLengthParams.lengthUnit = GeometryService.UNIT_METER;\n        areasAndLengthParams.areaUnit = GeometryService.UNIT_SQUARE_METERS;\n        areasAndLengthParams.calculationType = \"geodesic\";\n        geometryService.simplify([geometry], function (simplifiedGeometries) {\n          areasAndLengthParams.polygons = simplifiedGeometries;\n          geometryService.areasAndLengths(areasAndLengthParams);\n        });\n      }\n\n      function outputAreaAndPower(evtObj) {\n        var result = evtObj.result; // area of polygon selected by user\n\n        dom.byId(\"area\").innerHTML = result.areas[0].toFixed(0) + \" m\" + \"2\".sup(); // from https://photovoltaic-software.com/principle-ressources/how-calculate-solar-energy-power-pv-systems\n        // Nominal power = A * r * H * PR, where A = total solar panel area, r = solar panel efficiency,\n        // H = annual average solar radtion on tilted panels, and PR = performance ratio, coefficient for losses\n        // Assumptions: standard test conditions (STC): radiation=1000 W/m2, cell temperature=25C, Wind speed=1 m/s, AM=1.5\n        //              r = 15%, H = 1250 kWh/m^2*year, PR = 0.75\n\n        dom.byId(\"power\").innerHTML = (result.areas[0] * 0.15 * 1250 * 0.75).toFixed(0) + \" kWh/year\";\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"webmap\",\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/src/components/WebMapView.js"],"names":["React","loadModules","WebMapView","Component","constructor","props","mapRef","createRef","componentDidMount","css","then","ArcGISMap","MapView","map","basemap","view","container","current","center","zoom","addGeometryService","require","dom","lang","json","esriConfig","Map","Graphic","Geometry","Extent","SpatialReference","GeometryService","AreasAndLengthsParameters","Draw","SimpleFillSymbol","defaults","io","proxyUrl","alwaysUseProxy","on","tb","hitch","getAreaAndLength","activate","FREEHAND_POLYGON","geometryService","outputAreaAndPower","evtObj","geometry","graphics","clear","graphic","add","areasAndLengthParams","lengthUnit","UNIT_METER","areaUnit","UNIT_SQUARE_METERS","calculationType","simplify","simplifiedGeometries","polygons","areasAndLengths","result","byId","innerHTML","areas","toFixed","sup","componentWillUnmount","render"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AAEA,OAAO,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAyC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcN,KAAK,CAACO,SAAN,EAAd;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACAP,IAAAA,WAAW,CAAC,CAAC,UAAD,EAAa,oBAAb,CAAD,EAAqC;AAAEQ,MAAAA,GAAG,EAAE;AAAP,KAArC,CAAX,CACCC,IADD,CACM,CAAC,CAACC,SAAD,EAAYC,OAAZ,CAAD,KAA0B;AAC9B,YAAMC,GAAG,GAAG,IAAIF,SAAJ,CAAc;AACxBG,QAAAA,OAAO,EAAE;AADe,OAAd,CAAZ;AAIA,WAAKC,IAAL,GAAY,IAAIH,OAAJ,CAAY;AACtBI,QAAAA,SAAS,EAAE,KAAKV,MAAL,CAAYW,OADD;AAEtBJ,QAAAA,GAAG,EAAEA,GAFiB;AAGtBK,QAAAA,MAAM,EAAE,CAAC,CAAC,GAAF,EAAO,EAAP,CAHc;AAItBC,QAAAA,IAAI,EAAE;AAJgB,OAAZ,CAAZ;AAMD,KAZD,EAaCT,IAbD,CAaM,MAAMU,kBAAkB,EAb9B;AAcD;;AAEDA,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,OAAO,CAAC,CAAC,UAAD,EACJ,iBADI,EAEJ,WAFI,EAGJ,aAHI,EAIJ,UAJI,EAKJ,cALI,EAMJ,wBANI,EAOJ,sBAPI,EAQJ,uBARI,EASJ,4BATI,EAUJ,sCAVI,EAWJ,oBAXI,EAYJ,+BAZI,CAAD,EAaL,UAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,OAA3C,EAAoDC,QAApD,EACEC,MADF,EACUC,gBADV,EAC4BC,eAD5B,EAC6CC,yBAD7C,EACwEC,IADxE,EAC8EC,gBAD9E,EAC+F;AAE/F;AACA;AACAT,MAAAA,UAAU,CAACU,QAAX,CAAoBC,EAApB,CAAuBC,QAAvB,GAAkC,SAAlC;AACAZ,MAAAA,UAAU,CAACU,QAAX,CAAoBC,EAApB,CAAuBE,cAAvB,GAAwC,KAAxC;AAEAzB,MAAAA,GAAG,CAAC0B,EAAJ,CAAO,MAAP,EAAe,YAAW;AACxB,YAAIC,EAAE,GAAG,IAAIP,IAAJ,CAASpB,GAAT,CAAT;AACA2B,QAAAA,EAAE,CAACD,EAAH,CAAM,UAAN,EAAkBhB,IAAI,CAACkB,KAAL,CAAW5B,GAAX,EAAgB6B,gBAAhB,CAAlB;AACAF,QAAAA,EAAE,CAACG,QAAH,CAAYV,IAAI,CAACW,gBAAjB;AACD,OAJD;AAMA,UAAIC,eAAe,GAAG,IAAId,eAAJ,CAAoB,+FAApB,CAAtB;AACAc,MAAAA,eAAe,CAACN,EAAhB,CAAmB,4BAAnB,EAAiDO,kBAAjD;;AAEA,eAASJ,gBAAT,CAA0BK,MAA1B,EAAkC;AAChC,YAAIlC,GAAG,GAAG,IAAV;AAAA,YACImC,QAAQ,GAAGD,MAAM,CAACC,QADtB;AAEAnC,QAAAA,GAAG,CAACoC,QAAJ,CAAaC,KAAb;AAEA,YAAIC,OAAO,GAAGtC,GAAG,CAACoC,QAAJ,CAAaG,GAAb,CAAiB,IAAIzB,OAAJ,CAAYqB,QAAZ,EAAsB,IAAId,gBAAJ,EAAtB,CAAjB,CAAd,CALgC,CAOhC;;AACA,YAAImB,oBAAoB,GAAG,IAAIrB,yBAAJ,EAA3B;AACAqB,QAAAA,oBAAoB,CAACC,UAArB,GAAkCvB,eAAe,CAACwB,UAAlD;AACAF,QAAAA,oBAAoB,CAACG,QAArB,GAAgCzB,eAAe,CAAC0B,kBAAhD;AACAJ,QAAAA,oBAAoB,CAACK,eAArB,GAAuC,UAAvC;AACAb,QAAAA,eAAe,CAACc,QAAhB,CAAyB,CAACX,QAAD,CAAzB,EAAqC,UAASY,oBAAT,EAA+B;AAClEP,UAAAA,oBAAoB,CAACQ,QAArB,GAAgCD,oBAAhC;AACAf,UAAAA,eAAe,CAACiB,eAAhB,CAAgCT,oBAAhC;AACD,SAHD;AAIH;;AAED,eAASP,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,YAAIgB,MAAM,GAAGhB,MAAM,CAACgB,MAApB,CADkC,CAElC;;AACAzC,QAAAA,GAAG,CAAC0C,IAAJ,CAAS,MAAT,EAAiBC,SAAjB,GAA6BF,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBC,OAAhB,CAAwB,CAAxB,IAA6B,IAA7B,GAAoC,IAAIC,GAAJ,EAAjE,CAHkC,CAKlC;AACA;AACA;AACA;AACA;;AACA9C,QAAAA,GAAG,CAAC0C,IAAJ,CAAS,OAAT,EAAkBC,SAAlB,GAA8B,CAACF,MAAM,CAACG,KAAP,CAAa,CAAb,IAAkB,IAAlB,GAAyB,IAAzB,GAAgC,IAAjC,EAAuCC,OAAvC,CAA+C,CAA/C,IAAoD,WAAlF;AACD;AACA,KA5DM,CAAP;AA6DD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKtD,IAAT,EAAe;AACb;AACA,WAAKA,IAAL,CAAUC,SAAV,GAAsB,IAAtB;AACD;AACF;;AAEDsD,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,GAAG,EAAE,KAAKhE,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAnG6C","sourcesContent":["// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\n\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\n// import geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', 'esri/views/MapView'], { css: true })\n    .then(([ArcGISMap, MapView]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n\n      this.view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-118, 34],\n        zoom: 8\n      });\n    })\n    .then(() => addGeometryService());\n  }\n\n  addGeometryService() {\n    require([\"dojo/dom\",\n        \"dojo/_base/lang\",\n        \"dojo/json\",\n        \"esri/config\",\n        \"esri/map\",\n        \"esri/graphic\",\n        \"esri/geometry/Geometry\",\n        \"esri/geometry/Extent\",\n        \"esri/SpatialReference\",\n        \"esri/tasks/GeometryService\",\n        \"esri/tasks/AreasAndLengthsParameters\",\n        \"esri/toolbars/draw\",\n        \"esri/symbols/SimpleFillSymbol\"],\n      function(dom, lang, json, esriConfig, Map, Graphic, Geometry, \n        Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol){\n\n      //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n      //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n      esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n      esriConfig.defaults.io.alwaysUseProxy = false;\n      \n      map.on(\"load\", function() {\n        var tb = new Draw(map);\n        tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n        tb.activate(Draw.FREEHAND_POLYGON);\n      });\n      \n      let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      geometryService.on(\"areas-and-lengths-complete\", outputAreaAndPower);\n\n      function getAreaAndLength(evtObj) {\n        let map = this,\n            geometry = evtObj.geometry;\n        map.graphics.clear();\n        \n        let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n        \n        //setup the parameters for the area and power calculation\n        var areasAndLengthParams = new AreasAndLengthsParameters();\n        areasAndLengthParams.lengthUnit = GeometryService.UNIT_METER;\n        areasAndLengthParams.areaUnit = GeometryService.UNIT_SQUARE_METERS;\n        areasAndLengthParams.calculationType = \"geodesic\";\n        geometryService.simplify([geometry], function(simplifiedGeometries) {\n          areasAndLengthParams.polygons = simplifiedGeometries;\n          geometryService.areasAndLengths(areasAndLengthParams);\n        });\n    }\n\n    function outputAreaAndPower(evtObj) {\n      var result = evtObj.result;\n      // area of polygon selected by user\n      dom.byId(\"area\").innerHTML = result.areas[0].toFixed(0) + \" m\" + \"2\".sup();\n\n      // from https://photovoltaic-software.com/principle-ressources/how-calculate-solar-energy-power-pv-systems\n      // Nominal power = A * r * H * PR, where A = total solar panel area, r = solar panel efficiency,\n      // H = annual average solar radtion on tilted panels, and PR = performance ratio, coefficient for losses\n      // Assumptions: standard test conditions (STC): radiation=1000 W/m2, cell temperature=25C, Wind speed=1 m/s, AM=1.5\n      //              r = 15%, H = 1250 kWh/m^2*year, PR = 0.75\n      dom.byId(\"power\").innerHTML = (result.areas[0] * 0.15 * 1250 * 0.75).toFixed(0) + \" kWh/year\";\n    }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"webmap\" ref={this.mapRef} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}