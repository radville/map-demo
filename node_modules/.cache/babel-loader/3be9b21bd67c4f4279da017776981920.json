{"ast":null,"code":"var _jsxFileName = \"/Users/Laura/Development/solar-calculator/src/components/WebMapView.js\";\n// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\nimport React from 'react';\nimport { loadModules } from 'esri-loader'; // import geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/widgets/Search'], {\n      css: true\n    }).then(([ArcGISMap, MapView, Search, lang, Draw, Graphic, GeometryService, AreasAndLengthsParameters, SimpleFillSymbol, dom, json]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n      let view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-100, 38],\n        zoom: 4\n      }); // add searchbar \n\n      let search = new Search({\n        view: view\n      });\n      view.ui.add(search, \"top-right\"); // let draw = new Draw(map);\n      // draw.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n      // draw.activate(Draw.FREEHAND_POLYGON);\n      // function outputAreaAndLength(evtObj) {\n      //   let result = evtObj.result;\n      //   console.log(json.stringify(result));\n      //   dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      //   dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n      // }\n      // function getAreaAndLength(evtObj) {\n      //   let geometry = evtObj.geometry;\n      //   map.graphics.clear();\n      //   let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n      //   //setup the parameters for the areas and lengths operation\n      //   let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      //   geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n      //   const areasAndLengthParams = new AreasAndLengthsParameters();\n      //   areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      //   areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      //   areasAndLengthParams.calculationType = \"geodesic\";\n      //   geometryService.simplify([geometry], function(simplifiedGeometries) {\n      //     areasAndLengthParams.polygons = simplifiedGeometries;\n      //     geometryService.areasAndLengths(areasAndLengthParams);\n      //   });\n      // }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"webmap esri\",\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"function() \", console.log(\"hello\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/src/components/WebMapView.js"],"names":["React","loadModules","WebMapView","Component","constructor","props","mapRef","createRef","componentDidMount","css","then","ArcGISMap","MapView","Search","lang","Draw","Graphic","GeometryService","AreasAndLengthsParameters","SimpleFillSymbol","dom","json","map","basemap","view","container","current","center","zoom","search","ui","add","componentWillUnmount","render","console","log"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AAEA,OAAO,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAyC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcN,KAAK,CAACO,SAAN,EAAd;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAElB;AACAP,IAAAA,WAAW,CAAC,CAAC,UAAD,EACV,oBADU,EAEV,qBAFU,CAAD,EAEe;AAAEQ,MAAAA,GAAG,EAAE;AAAP,KAFf,CAAX,CAGCC,IAHD,CAGM,CAAC,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkDC,eAAlD,EACLC,yBADK,EACsBC,gBADtB,EACwCC,GADxC,EAC6CC,IAD7C,CAAD,KACwD;AAC5D,YAAMC,GAAG,GAAG,IAAIX,SAAJ,CAAc;AACxBY,QAAAA,OAAO,EAAE;AADe,OAAd,CAAZ;AAIA,UAAIC,IAAI,GAAG,IAAIZ,OAAJ,CAAY;AACrBa,QAAAA,SAAS,EAAE,KAAKnB,MAAL,CAAYoB,OADF;AAErBJ,QAAAA,GAAG,EAAEA,GAFgB;AAGrBK,QAAAA,MAAM,EAAE,CAAC,CAAC,GAAF,EAAO,EAAP,CAHa;AAIrBC,QAAAA,IAAI,EAAE;AAJe,OAAZ,CAAX,CAL4D,CAY5D;;AACA,UAAIC,MAAM,GAAG,IAAIhB,MAAJ,CAAW;AACtBW,QAAAA,IAAI,EAAEA;AADgB,OAAX,CAAb;AAGAA,MAAAA,IAAI,CAACM,EAAL,CAAQC,GAAR,CAAYF,MAAZ,EAAoB,WAApB,EAhB4D,CAkB5D;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,KArDD;AAsDD;;AAGDG,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKR,IAAT,EAAe;AACb;AACA,WAAKA,IAAL,CAAUC,SAAV,GAAsB,IAAtB;AACD;AACF;;AAEDQ,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAE,KAAK3B,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI4B,OAAO,CAACC,GAAR,CAAY,OAAZ,CAFJ,CADF;AAOD;;AAjF6C","sourcesContent":["// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\n\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\n// import geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', \n      'esri/views/MapView', \n      'esri/widgets/Search'], { css: true })\n    .then(([ArcGISMap, MapView, Search, lang, Draw, Graphic, GeometryService, \n      AreasAndLengthsParameters, SimpleFillSymbol, dom, json]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n\n      let view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-100, 38],\n        zoom: 4\n      });\n      \n      // add searchbar \n      let search = new Search({\n        view: view\n      });\n      view.ui.add(search, \"top-right\");\n\n      // let draw = new Draw(map);\n      // draw.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n      // draw.activate(Draw.FREEHAND_POLYGON);\n\n      // function outputAreaAndLength(evtObj) {\n      //   let result = evtObj.result;\n      //   console.log(json.stringify(result));\n      //   dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      //   dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n      // }\n      \n      // function getAreaAndLength(evtObj) {\n      //   let geometry = evtObj.geometry;\n      //   map.graphics.clear();\n        \n      //   let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n        \n      //   //setup the parameters for the areas and lengths operation\n      //   let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      //   geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n\n      //   const areasAndLengthParams = new AreasAndLengthsParameters();\n      //   areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      //   areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      //   areasAndLengthParams.calculationType = \"geodesic\";\n      //   geometryService.simplify([geometry], function(simplifiedGeometries) {\n      //     areasAndLengthParams.polygons = simplifiedGeometries;\n      //     geometryService.areasAndLengths(areasAndLengthParams);\n      //   });\n      // }\n      \n    });\n  }\n\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"webmap esri\" ref={this.mapRef}>\n        function() {\n          console.log(\"hello\")\n        }\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}