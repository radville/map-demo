{"ast":null,"code":"define([\"../global\", \"../has\", \"./config\", \"require\", \"module\"], function (global, has, config, require, module) {\n  // module:\n  //\t\tdojo/_base/kernel\n  // This module is the foundational module of the dojo boot sequence; it defines the dojo object.\n  var // loop variables for this module\n  i,\n      p,\n      // create dojo, dijit, and dojox\n  // FIXME: in 2.0 remove dijit, dojox being created by dojo\n  dijit = {},\n      dojox = {},\n      dojo = {\n    // summary:\n    //\t\tThis module is the foundational module of the dojo boot sequence; it defines the dojo object.\n    // notice dojo takes ownership of the value of the config module\n    config: config,\n    global: global,\n    dijit: dijit,\n    dojox: dojox\n  }; // Configure the scope map. For a 100% AMD application, the scope map is not needed other than to provide\n  // a _scopeName property for the dojo, dijit, and dojox root object so those packages can create\n  // unique names in the global space.\n  //\n  // Built, legacy modules use the scope map to allow those modules to be expressed as if dojo, dijit, and dojox,\n  // where global when in fact they are either global under different names or not global at all. In v1.6-, the\n  // config variable \"scopeMap\" was used to map names as used within a module to global names. This has been\n  // subsumed by the AMD map configuration variable which can relocate packages to different names. For backcompat,\n  // only the \"*\" mapping is supported. See http://livedocs.dojotoolkit.org/developer/design/loader#legacy-cross-domain-mode for details.\n  //\n  // The following computations contort the packageMap for this dojo instance into a scopeMap.\n\n  var scopeMap = // a map from a name used in a legacy module to the (global variable name, object addressed by that name)\n  // always map dojo, dijit, and dojox\n  {\n    dojo: [\"dojo\", dojo],\n    dijit: [\"dijit\", dijit],\n    dojox: [\"dojox\", dojox]\n  },\n      packageMap = // the package map for this dojo instance; note, a foreign loader or no pacakgeMap results in the above default config\n  require.map && require.map[module.id.match(/[^\\/]+/)[0]],\n      item; // process all mapped top-level names for this instance of dojo\n\n\n  for (p in packageMap) {\n    if (scopeMap[p]) {\n      // mapped dojo, dijit, or dojox\n      scopeMap[p][0] = packageMap[p];\n    } else {\n      // some other top-level name\n      scopeMap[p] = [packageMap[p], {}];\n    }\n  } // publish those names to _scopeName and, optionally, the global namespace\n\n\n  for (p in scopeMap) {\n    item = scopeMap[p];\n    item[1]._scopeName = item[0];\n\n    if (!config.noGlobals) {\n      global[item[0]] = item[1];\n    }\n  }\n\n  dojo.scopeMap = scopeMap;\n  /*===== dojo.__docParserConfigureScopeMap(scopeMap); =====*/\n  // FIXME: dojo.baseUrl and dojo.config.baseUrl should be deprecated\n\n  dojo.baseUrl = dojo.config.baseUrl = require.baseUrl;\n  dojo.isAsync = !has(\"dojo-loader\") || require.async;\n  dojo.locale = config.locale;\n  var rev = \"$Rev: d6e8ff38 $\".match(/[0-9a-f]{7,}/);\n  dojo.version = {\n    // summary:\n    //\t\tVersion number of the Dojo Toolkit\n    // description:\n    //\t\tHash about the version, including\n    //\n    //\t\t- major: Integer: Major version. If total version is \"1.2.0beta1\", will be 1\n    //\t\t- minor: Integer: Minor version. If total version is \"1.2.0beta1\", will be 2\n    //\t\t- patch: Integer: Patch version. If total version is \"1.2.0beta1\", will be 0\n    //\t\t- flag: String: Descriptor flag. If total version is \"1.2.0beta1\", will be \"beta1\"\n    //\t\t- revision: Number: The Git rev from which dojo was pulled\n    major: 1,\n    minor: 14,\n    patch: 2,\n    flag: \"\",\n    revision: rev ? rev[0] : NaN,\n    toString: function () {\n      var v = dojo.version;\n      return v.major + \".\" + v.minor + \".\" + v.patch + v.flag + \" (\" + v.revision + \")\"; // String\n    }\n  }; // If has(\"extend-dojo\") is truthy, then as a dojo module is defined it should push it's definitions\n  // into the dojo object, and conversely. In 2.0, it will likely be unusual to augment another object\n  // as a result of defining a module. This has feature gives a way to force 2.0 behavior as the code\n  // is migrated. Absent specific advice otherwise, set extend-dojo to truthy.\n\n  has.add(\"extend-dojo\", 1);\n\n  if (!has(\"csp-restrictions\")) {\n    Function(\"d\", \"d.eval = function(){return d.global.eval ? d.global.eval(arguments[0]) : eval(arguments[0]);}\")(dojo);\n  }\n  /*=====\n  dojo.eval = function(scriptText){\n  \t// summary:\n  \t//\t\tA legacy method created for use exclusively by internal Dojo methods. Do not use this method\n  \t//\t\tdirectly unless you understand its possibly-different implications on the platforms your are targeting.\n  \t// description:\n  \t//\t\tMakes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers\n  \t//\t\tthat support indirect eval.\n  \t//\n  \t//\t\tAs usual, IE does not. On IE, the only way to implement global eval is to\n  \t//\t\tuse execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval.\n  \t//\t\tThis implementation uses the technique of executing eval in the scope of a function that is a single scope\n  \t//\t\tframe below the global scope; thereby coming close to the global scope. Note carefully that\n  \t//\n  \t//\t\tdojo.eval(\"var pi = 3.14;\");\n  \t//\n  \t//\t\twill define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want\n  \t//\t\tto define a global variable using dojo.eval, write something like\n  \t//\n  \t//\t\tdojo.eval(\"window.pi = 3.14;\")\n  \t// scriptText:\n  \t//\t\tThe text to evaluation.\n  \t// returns:\n  \t//\t\tThe result of the evaluation. Often `undefined`\n  };\n  =====*/\n\n\n  if (has(\"host-rhino\")) {\n    dojo.exit = function (exitcode) {\n      quit(exitcode);\n    };\n  } else {\n    dojo.exit = function () {};\n  }\n\n  if (!has(\"host-webworker\")) {\n    // console is immutable in FF30+, https://bugs.dojotoolkit.org/ticket/18100\n    has.add(\"dojo-guarantee-console\", // ensure that console.log, console.warn, etc. are defined\n    1);\n  }\n\n  if (has(\"dojo-guarantee-console\")) {\n    // IE 9 bug: https://bugs.dojotoolkit.org/ticket/18197\n    has.add(\"console-as-object\", function () {\n      return Function.prototype.bind && console && typeof console.log === \"object\";\n    });\n    typeof console != \"undefined\" || (console = {}); // intentional assignment\n    //\tBe careful to leave 'log' always at the end\n\n    var cn = [\"assert\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"group\", \"groupEnd\", \"info\", \"profile\", \"profileEnd\", \"time\", \"timeEnd\", \"trace\", \"warn\", \"log\"];\n    var tn;\n    i = 0;\n\n    while (tn = cn[i++]) {\n      if (!console[tn]) {\n        (function () {\n          var tcn = tn + \"\";\n          console[tcn] = 'log' in console ? function () {\n            var a = Array.prototype.slice.call(arguments);\n            a.unshift(tcn + \":\");\n            console[\"log\"](a.join(\" \"));\n          } : function () {};\n          console[tcn]._fake = true;\n        })();\n      } else if (has(\"console-as-object\")) {\n        console[tn] = Function.prototype.bind.call(console[tn], console);\n      }\n    }\n  }\n\n  has.add(\"dojo-debug-messages\", // include dojo.deprecated/dojo.experimental implementations\n  !!config.isDebug);\n\n  dojo.deprecated = dojo.experimental = function () {};\n\n  if (has(\"dojo-debug-messages\")) {\n    dojo.deprecated = function (\n    /*String*/\n    behaviour,\n    /*String?*/\n    extra,\n    /*String?*/\n    removal) {\n      // summary:\n      //\t\tLog a debug message to indicate that a behavior has been\n      //\t\tdeprecated.\n      // behaviour: String\n      //\t\tThe API or behavior being deprecated. Usually in the form\n      //\t\tof \"myApp.someFunction()\".\n      // extra: String?\n      //\t\tText to append to the message. Often provides advice on a\n      //\t\tnew function or facility to achieve the same goal during\n      //\t\tthe deprecation period.\n      // removal: String?\n      //\t\tText to indicate when in the future the behavior will be\n      //\t\tremoved. Usually a version number.\n      // example:\n      //\t| dojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\n      var message = \"DEPRECATED: \" + behaviour;\n\n      if (extra) {\n        message += \" \" + extra;\n      }\n\n      if (removal) {\n        message += \" -- will be removed in version: \" + removal;\n      }\n\n      console.warn(message);\n    };\n\n    dojo.experimental = function (\n    /* String */\n    moduleName,\n    /* String? */\n    extra) {\n      // summary:\n      //\t\tMarks code as experimental.\n      // description:\n      //\t\tThis can be used to mark a function, file, or module as\n      //\t\texperimental.\t Experimental code is not ready to be used, and the\n      //\t\tAPIs are subject to change without notice.\tExperimental code may be\n      //\t\tcompleted deleted without going through the normal deprecation\n      //\t\tprocess.\n      // moduleName: String\n      //\t\tThe name of a module, or the name of a module file or a specific\n      //\t\tfunction\n      // extra: String?\n      //\t\tsome additional message for the user\n      // example:\n      //\t| dojo.experimental(\"dojo.data.Result\");\n      // example:\n      //\t| dojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\n      var message = \"EXPERIMENTAL: \" + moduleName + \" -- APIs subject to change without notice.\";\n\n      if (extra) {\n        message += \" \" + extra;\n      }\n\n      console.warn(message);\n    };\n  }\n\n  has.add(\"dojo-modulePaths\", // consume dojo.modulePaths processing\n  1);\n\n  if (has(\"dojo-modulePaths\")) {\n    // notice that modulePaths won't be applied to any require's before the dojo/_base/kernel factory is run;\n    // this is the v1.6- behavior.\n    if (config.modulePaths) {\n      dojo.deprecated(\"dojo.modulePaths\", \"use paths configuration\");\n      var paths = {};\n\n      for (p in config.modulePaths) {\n        paths[p.replace(/\\./g, \"/\")] = config.modulePaths[p];\n      }\n\n      require({\n        paths: paths\n      });\n    }\n  }\n\n  has.add(\"dojo-moduleUrl\", // include dojo.moduleUrl\n  1);\n\n  if (has(\"dojo-moduleUrl\")) {\n    dojo.moduleUrl = function (\n    /*String*/\n    module,\n    /*String?*/\n    url) {\n      // summary:\n      //\t\tReturns a URL relative to a module.\n      // example:\n      //\t|\tvar pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\n      //\t|\tconsole.dir(pngPath); // list the object properties\n      //\t|\t// create an image and set it's source to pngPath's value:\n      //\t|\tvar img = document.createElement(\"img\");\n      //\t|\timg.src = pngPath;\n      //\t|\t// add our image to the document\n      //\t|\tdojo.body().appendChild(img);\n      // example:\n      //\t\tyou may de-reference as far as you like down the package\n      //\t\thierarchy.  This is sometimes handy to avoid lengthy relative\n      //\t\turls or for building portable sub-packages. In this example,\n      //\t\tthe `acme.widget` and `acme.util` directories may be located\n      //\t\tunder different roots (see `dojo.registerModulePath`) but the\n      //\t\tthe modules which reference them can be unaware of their\n      //\t\trelative locations on the filesystem:\n      //\t|\t// somewhere in a configuration block\n      //\t|\tdojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\n      //\t|\tdojo.registerModulePath(\"acme.util\", \"../../util\");\n      //\t|\n      //\t|\t// ...\n      //\t|\n      //\t|\t// code in a module using acme resources\n      //\t|\tvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\n      //\t|\tvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\n      dojo.deprecated(\"dojo.moduleUrl()\", \"use require.toUrl\", \"2.0\"); // require.toUrl requires a filetype; therefore, just append the suffix \"/*.*\" to guarantee a filetype, then\n      // remove the suffix from the result. This way clients can request a url w/out a filetype. This should be\n      // rare, but it maintains backcompat for the v1.x line (note: dojo.moduleUrl will be removed in v2.0).\n      // Notice * is an illegal filename so it won't conflict with any real path map that may exist the paths config.\n\n      var result = null;\n\n      if (module) {\n        result = require.toUrl(module.replace(/\\./g, \"/\") + (url ? \"/\" + url : \"\") + \"/*.*\").replace(/\\/\\*\\.\\*/, \"\") + (url ? \"\" : \"/\");\n      }\n\n      return result;\n    };\n  }\n\n  dojo._hasResource = {}; // for backward compatibility with layers built with 1.6 tooling\n\n  return dojo;\n});","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/node_modules/dojo/_base/kernel.js"],"names":["define","global","has","config","require","module","i","p","dijit","dojox","dojo","scopeMap","packageMap","map","id","match","item","_scopeName","noGlobals","baseUrl","isAsync","async","locale","rev","version","major","minor","patch","flag","revision","NaN","toString","v","add","Function","exit","exitcode","quit","prototype","bind","console","log","cn","tn","tcn","a","Array","slice","call","arguments","unshift","join","_fake","isDebug","deprecated","experimental","behaviour","extra","removal","message","warn","moduleName","modulePaths","paths","replace","moduleUrl","url","result","toUrl","_hasResource"],"mappings":"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","sourcesContent":["define([\"../global\", \"../has\", \"./config\", \"require\", \"module\"], function(global, has, config, require, module){\n\t// module:\n\t//\t\tdojo/_base/kernel\n\n\t// This module is the foundational module of the dojo boot sequence; it defines the dojo object.\n\n\tvar\n\t\t// loop variables for this module\n\t\ti, p,\n\n\t\t// create dojo, dijit, and dojox\n\t\t// FIXME: in 2.0 remove dijit, dojox being created by dojo\n\t\tdijit = {},\n\t\tdojox = {},\n\t\tdojo = {\n\t\t\t// summary:\n\t\t\t//\t\tThis module is the foundational module of the dojo boot sequence; it defines the dojo object.\n\n\t\t\t// notice dojo takes ownership of the value of the config module\n\t\t\tconfig:config,\n\t\t\tglobal:global,\n\t\t\tdijit:dijit,\n\t\t\tdojox:dojox\n\t\t};\n\n\n\t// Configure the scope map. For a 100% AMD application, the scope map is not needed other than to provide\n\t// a _scopeName property for the dojo, dijit, and dojox root object so those packages can create\n\t// unique names in the global space.\n\t//\n\t// Built, legacy modules use the scope map to allow those modules to be expressed as if dojo, dijit, and dojox,\n\t// where global when in fact they are either global under different names or not global at all. In v1.6-, the\n\t// config variable \"scopeMap\" was used to map names as used within a module to global names. This has been\n\t// subsumed by the AMD map configuration variable which can relocate packages to different names. For backcompat,\n\t// only the \"*\" mapping is supported. See http://livedocs.dojotoolkit.org/developer/design/loader#legacy-cross-domain-mode for details.\n\t//\n\t// The following computations contort the packageMap for this dojo instance into a scopeMap.\n\tvar scopeMap =\n\t\t\t// a map from a name used in a legacy module to the (global variable name, object addressed by that name)\n\t\t\t// always map dojo, dijit, and dojox\n\t\t\t{\n\t\t\t\tdojo:[\"dojo\", dojo],\n\t\t\t\tdijit:[\"dijit\", dijit],\n\t\t\t\tdojox:[\"dojox\", dojox]\n\t\t\t},\n\n\t\tpackageMap =\n\t\t\t// the package map for this dojo instance; note, a foreign loader or no pacakgeMap results in the above default config\n\t\t\t(require.map && require.map[module.id.match(/[^\\/]+/)[0]]),\n\n\t\titem;\n\n\n\t// process all mapped top-level names for this instance of dojo\n\tfor(p in packageMap){\n\t\tif(scopeMap[p]){\n\t\t\t// mapped dojo, dijit, or dojox\n\t\t\tscopeMap[p][0] = packageMap[p];\n\t\t}else{\n\t\t\t// some other top-level name\n\t\t\tscopeMap[p] = [packageMap[p], {}];\n\t\t}\n\t}\n\n\t// publish those names to _scopeName and, optionally, the global namespace\n\tfor(p in scopeMap){\n\t\titem = scopeMap[p];\n\t\titem[1]._scopeName = item[0];\n\t\tif(!config.noGlobals){\n\t\t\tglobal[item[0]] = item[1];\n\t\t}\n\t}\n\tdojo.scopeMap = scopeMap;\n\n\t/*===== dojo.__docParserConfigureScopeMap(scopeMap); =====*/\n\n\t// FIXME: dojo.baseUrl and dojo.config.baseUrl should be deprecated\n\tdojo.baseUrl = dojo.config.baseUrl = require.baseUrl;\n\tdojo.isAsync = !has(\"dojo-loader\") || require.async;\n\tdojo.locale = config.locale;\n\n\tvar rev = \"$Rev: d6e8ff38 $\".match(/[0-9a-f]{7,}/);\n\tdojo.version = {\n\t\t// summary:\n\t\t//\t\tVersion number of the Dojo Toolkit\n\t\t// description:\n\t\t//\t\tHash about the version, including\n\t\t//\n\t\t//\t\t- major: Integer: Major version. If total version is \"1.2.0beta1\", will be 1\n\t\t//\t\t- minor: Integer: Minor version. If total version is \"1.2.0beta1\", will be 2\n\t\t//\t\t- patch: Integer: Patch version. If total version is \"1.2.0beta1\", will be 0\n\t\t//\t\t- flag: String: Descriptor flag. If total version is \"1.2.0beta1\", will be \"beta1\"\n\t\t//\t\t- revision: Number: The Git rev from which dojo was pulled\n\n\t\tmajor: 1, minor: 14, patch: 2, flag: \"\",\n\t\trevision: rev ? rev[0] : NaN,\n\t\ttoString: function(){\n\t\t\tvar v = dojo.version;\n\t\t\treturn v.major + \".\" + v.minor + \".\" + v.patch + v.flag + \" (\" + v.revision + \")\";\t// String\n\t\t}\n\t};\n\n\t// If has(\"extend-dojo\") is truthy, then as a dojo module is defined it should push it's definitions\n\t// into the dojo object, and conversely. In 2.0, it will likely be unusual to augment another object\n\t// as a result of defining a module. This has feature gives a way to force 2.0 behavior as the code\n\t// is migrated. Absent specific advice otherwise, set extend-dojo to truthy.\n\thas.add(\"extend-dojo\", 1);\n\n\tif(!has(\"csp-restrictions\")){\n\t\t(Function(\"d\", \"d.eval = function(){return d.global.eval ? d.global.eval(arguments[0]) : eval(arguments[0]);}\"))(dojo);\n\t}\n\t/*=====\n\tdojo.eval = function(scriptText){\n\t\t// summary:\n\t\t//\t\tA legacy method created for use exclusively by internal Dojo methods. Do not use this method\n\t\t//\t\tdirectly unless you understand its possibly-different implications on the platforms your are targeting.\n\t\t// description:\n\t\t//\t\tMakes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers\n\t\t//\t\tthat support indirect eval.\n\t\t//\n\t\t//\t\tAs usual, IE does not. On IE, the only way to implement global eval is to\n\t\t//\t\tuse execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval.\n\t\t//\t\tThis implementation uses the technique of executing eval in the scope of a function that is a single scope\n\t\t//\t\tframe below the global scope; thereby coming close to the global scope. Note carefully that\n\t\t//\n\t\t//\t\tdojo.eval(\"var pi = 3.14;\");\n\t\t//\n\t\t//\t\twill define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want\n\t\t//\t\tto define a global variable using dojo.eval, write something like\n\t\t//\n\t\t//\t\tdojo.eval(\"window.pi = 3.14;\")\n\t\t// scriptText:\n\t\t//\t\tThe text to evaluation.\n\t\t// returns:\n\t\t//\t\tThe result of the evaluation. Often `undefined`\n\t};\n\t=====*/\n\n\n\tif(has(\"host-rhino\")){\n\t\tdojo.exit = function(exitcode){\n\t\t\tquit(exitcode);\n\t\t};\n\t}else{\n\t\tdojo.exit = function(){\n\t\t};\n\t}\n\n\tif(!has(\"host-webworker\")){\n\t\t// console is immutable in FF30+, https://bugs.dojotoolkit.org/ticket/18100\n\t\thas.add(\"dojo-guarantee-console\",\n\t\t\t// ensure that console.log, console.warn, etc. are defined\n\t\t\t1\n\t\t);\n\t}\n\n\tif(has(\"dojo-guarantee-console\")){\n\t\t// IE 9 bug: https://bugs.dojotoolkit.org/ticket/18197\n\t\thas.add(\"console-as-object\", function () {\n\t\t\treturn Function.prototype.bind && console && typeof console.log === \"object\";\n\t\t});\n\n\t\ttypeof console != \"undefined\" || (console = {});  // intentional assignment\n\t\t//\tBe careful to leave 'log' always at the end\n\t\tvar cn = [\n\t\t\t\"assert\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"group\",\n\t\t\t\"groupEnd\", \"info\", \"profile\", \"profileEnd\", \"time\", \"timeEnd\",\n\t\t\t\"trace\", \"warn\", \"log\"\n\t\t];\n\t\tvar tn;\n\t\ti = 0;\n\t\twhile((tn = cn[i++])){\n\t\t\tif(!console[tn]){\n\t\t\t\t(function(){\n\t\t\t\t\tvar tcn = tn + \"\";\n\t\t\t\t\tconsole[tcn] = ('log' in console) ? function(){\n\t\t\t\t\t\tvar a = Array.prototype.slice.call(arguments);\n\t\t\t\t\t\ta.unshift(tcn + \":\");\n\t\t\t\t\t\tconsole[\"log\"](a.join(\" \"));\n\t\t\t\t\t} : function(){};\n\t\t\t\t\tconsole[tcn]._fake = true;\n\t\t\t\t})();\n\t\t\t}else if(has(\"console-as-object\")){\n\t\t\t\tconsole[tn] = Function.prototype.bind.call(console[tn], console);\n\t\t\t}\n\t\t}\n\t}\n\n\thas.add(\"dojo-debug-messages\",\n\t\t// include dojo.deprecated/dojo.experimental implementations\n\t\t!!config.isDebug\n\t);\n\tdojo.deprecated = dojo.experimental =  function(){};\n\tif(has(\"dojo-debug-messages\")){\n\t\tdojo.deprecated = function(/*String*/ behaviour, /*String?*/ extra, /*String?*/ removal){\n\t\t\t// summary:\n\t\t\t//\t\tLog a debug message to indicate that a behavior has been\n\t\t\t//\t\tdeprecated.\n\t\t\t// behaviour: String\n\t\t\t//\t\tThe API or behavior being deprecated. Usually in the form\n\t\t\t//\t\tof \"myApp.someFunction()\".\n\t\t\t// extra: String?\n\t\t\t//\t\tText to append to the message. Often provides advice on a\n\t\t\t//\t\tnew function or facility to achieve the same goal during\n\t\t\t//\t\tthe deprecation period.\n\t\t\t// removal: String?\n\t\t\t//\t\tText to indicate when in the future the behavior will be\n\t\t\t//\t\tremoved. Usually a version number.\n\t\t\t// example:\n\t\t\t//\t| dojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\n\n\t\t\tvar message = \"DEPRECATED: \" + behaviour;\n\t\t\tif(extra){ message += \" \" + extra; }\n\t\t\tif(removal){ message += \" -- will be removed in version: \" + removal; }\n\t\t\tconsole.warn(message);\n\t\t};\n\n\t\tdojo.experimental = function(/* String */ moduleName, /* String? */ extra){\n\t\t\t// summary:\n\t\t\t//\t\tMarks code as experimental.\n\t\t\t// description:\n\t\t\t//\t\tThis can be used to mark a function, file, or module as\n\t\t\t//\t\texperimental.\t Experimental code is not ready to be used, and the\n\t\t\t//\t\tAPIs are subject to change without notice.\tExperimental code may be\n\t\t\t//\t\tcompleted deleted without going through the normal deprecation\n\t\t\t//\t\tprocess.\n\t\t\t// moduleName: String\n\t\t\t//\t\tThe name of a module, or the name of a module file or a specific\n\t\t\t//\t\tfunction\n\t\t\t// extra: String?\n\t\t\t//\t\tsome additional message for the user\n\t\t\t// example:\n\t\t\t//\t| dojo.experimental(\"dojo.data.Result\");\n\t\t\t// example:\n\t\t\t//\t| dojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\n\n\t\t\tvar message = \"EXPERIMENTAL: \" + moduleName + \" -- APIs subject to change without notice.\";\n\t\t\tif(extra){ message += \" \" + extra; }\n\t\t\tconsole.warn(message);\n\t\t};\n\t}\n\n\thas.add(\"dojo-modulePaths\",\n\t\t// consume dojo.modulePaths processing\n\t\t1\n\t);\n\tif(has(\"dojo-modulePaths\")){\n\t\t// notice that modulePaths won't be applied to any require's before the dojo/_base/kernel factory is run;\n\t\t// this is the v1.6- behavior.\n\t\tif(config.modulePaths){\n\t\t\tdojo.deprecated(\"dojo.modulePaths\", \"use paths configuration\");\n\t\t\tvar paths = {};\n\t\t\tfor(p in config.modulePaths){\n\t\t\t\tpaths[p.replace(/\\./g, \"/\")] = config.modulePaths[p];\n\t\t\t}\n\t\t\trequire({paths:paths});\n\t\t}\n\t}\n\n\thas.add(\"dojo-moduleUrl\",\n\t\t// include dojo.moduleUrl\n\t\t1\n\t);\n\tif(has(\"dojo-moduleUrl\")){\n\t\tdojo.moduleUrl = function(/*String*/module, /*String?*/url){\n\t\t\t// summary:\n\t\t\t//\t\tReturns a URL relative to a module.\n\t\t\t// example:\n\t\t\t//\t|\tvar pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\n\t\t\t//\t|\tconsole.dir(pngPath); // list the object properties\n\t\t\t//\t|\t// create an image and set it's source to pngPath's value:\n\t\t\t//\t|\tvar img = document.createElement(\"img\");\n\t\t\t//\t|\timg.src = pngPath;\n\t\t\t//\t|\t// add our image to the document\n\t\t\t//\t|\tdojo.body().appendChild(img);\n\t\t\t// example:\n\t\t\t//\t\tyou may de-reference as far as you like down the package\n\t\t\t//\t\thierarchy.  This is sometimes handy to avoid lengthy relative\n\t\t\t//\t\turls or for building portable sub-packages. In this example,\n\t\t\t//\t\tthe `acme.widget` and `acme.util` directories may be located\n\t\t\t//\t\tunder different roots (see `dojo.registerModulePath`) but the\n\t\t\t//\t\tthe modules which reference them can be unaware of their\n\t\t\t//\t\trelative locations on the filesystem:\n\t\t\t//\t|\t// somewhere in a configuration block\n\t\t\t//\t|\tdojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\n\t\t\t//\t|\tdojo.registerModulePath(\"acme.util\", \"../../util\");\n\t\t\t//\t|\n\t\t\t//\t|\t// ...\n\t\t\t//\t|\n\t\t\t//\t|\t// code in a module using acme resources\n\t\t\t//\t|\tvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\n\t\t\t//\t|\tvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\n\n\t\t\tdojo.deprecated(\"dojo.moduleUrl()\", \"use require.toUrl\", \"2.0\");\n\n\t\t\t// require.toUrl requires a filetype; therefore, just append the suffix \"/*.*\" to guarantee a filetype, then\n\t\t\t// remove the suffix from the result. This way clients can request a url w/out a filetype. This should be\n\t\t\t// rare, but it maintains backcompat for the v1.x line (note: dojo.moduleUrl will be removed in v2.0).\n\t\t\t// Notice * is an illegal filename so it won't conflict with any real path map that may exist the paths config.\n\t\t\tvar result = null;\n\t\t\tif(module){\n\t\t\t\tresult = require.toUrl(module.replace(/\\./g, \"/\") + (url ? (\"/\" + url) : \"\") + \"/*.*\").replace(/\\/\\*\\.\\*/, \"\") + (url ? \"\" : \"/\");\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t}\n\n\tdojo._hasResource = {}; // for backward compatibility with layers built with 1.6 tooling\n\n\treturn dojo;\n});\n"]},"metadata":{},"sourceType":"script"}