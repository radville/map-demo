{"ast":null,"code":"define([\"./kernel\", \"../has\", \"../sniff\"], function (dojo, has) {\n  // module:\n  //\t\tdojo/_base/lang\n  has.add(\"bug-for-in-skips-shadowed\", function () {\n    // if true, the for-in iterator skips object properties that exist in Object's prototype (IE 6 - ?)\n    for (var i in {\n      toString: 1\n    }) {\n      return 0;\n    }\n\n    return 1;\n  }); // Helper methods\n\n  var _extraNames = has(\"bug-for-in-skips-shadowed\") ? \"hasOwnProperty.valueOf.isPrototypeOf.propertyIsEnumerable.toLocaleString.toString.constructor\".split(\".\") : [],\n      _extraLen = _extraNames.length,\n      getProp = function (\n  /*Array*/\n  parts,\n  /*Boolean*/\n  create,\n  /*Object*/\n  context) {\n    if (!context) {\n      if (parts[0] && dojo.scopeMap[parts[0]]) {\n        // Voodoo code from the old days where \"dojo\" or \"dijit\" maps to some special object\n        // rather than just window.dojo\n        context = dojo.scopeMap[parts.shift()][1];\n      } else {\n        context = dojo.global;\n      }\n    }\n\n    try {\n      for (var i = 0; i < parts.length; i++) {\n        var p = parts[i];\n\n        if (!(p in context)) {\n          if (create) {\n            context[p] = {};\n          } else {\n            return; // return undefined\n          }\n        }\n\n        context = context[p];\n      }\n\n      return context; // mixed\n    } catch (e) {// \"p in context\" throws an exception when context is a number, boolean, etc. rather than an object,\n      // so in that corner case just return undefined (by having no return statement)\n    }\n  },\n      opts = Object.prototype.toString,\n      efficient = function (obj, offset, startWith) {\n    return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\n  },\n      _pattern = /\\{([^\\}]+)\\}/g; // Module export\n\n\n  var lang = {\n    // summary:\n    //\t\tThis module defines Javascript language extensions.\n    // _extraNames: String[]\n    //\t\tLists property names that must be explicitly processed during for-in iteration\n    //\t\tin environments that have has(\"bug-for-in-skips-shadowed\") true.\n    _extraNames: _extraNames,\n    _mixin: function (dest, source, copyFunc) {\n      // summary:\n      //\t\tCopies/adds all properties of source to dest; returns dest.\n      // dest: Object\n      //\t\tThe object to which to copy/add all properties contained in source.\n      // source: Object\n      //\t\tThe object from which to draw all properties to copy into dest.\n      // copyFunc: Function?\n      //\t\tThe process used to copy/add a property in source; defaults to the Javascript assignment operator.\n      // returns:\n      //\t\tdest, as modified\n      // description:\n      //\t\tAll properties, including functions (sometimes termed \"methods\"), excluding any non-standard extensions\n      //\t\tfound in Object.prototype, are copied/added to dest. Copying/adding each particular property is\n      //\t\tdelegated to copyFunc (if any); copyFunc defaults to the Javascript assignment operator if not provided.\n      //\t\tNotice that by default, _mixin executes a so-called \"shallow copy\" and aggregate types are copied/added by reference.\n      var name,\n          s,\n          i,\n          empty = {};\n\n      for (name in source) {\n        // the (!(name in empty) || empty[name] !== s) condition avoids copying properties in \"source\"\n        // inherited from Object.prototype.\t For example, if dest has a custom toString() method,\n        // don't overwrite it with the toString() method that source inherited from Object.prototype\n        s = source[name];\n\n        if (!(name in dest) || dest[name] !== s && (!(name in empty) || empty[name] !== s)) {\n          dest[name] = copyFunc ? copyFunc(s) : s;\n        }\n      }\n\n      if (has(\"bug-for-in-skips-shadowed\")) {\n        if (source) {\n          for (i = 0; i < _extraLen; ++i) {\n            name = _extraNames[i];\n            s = source[name];\n\n            if (!(name in dest) || dest[name] !== s && (!(name in empty) || empty[name] !== s)) {\n              dest[name] = copyFunc ? copyFunc(s) : s;\n            }\n          }\n        }\n      }\n\n      return dest; // Object\n    },\n    mixin: function (dest, sources) {\n      // summary:\n      //\t\tCopies/adds all properties of one or more sources to dest; returns dest.\n      // dest: Object\n      //\t\tThe object to which to copy/add all properties contained in source. If dest is falsy, then\n      //\t\ta new object is manufactured before copying/adding properties begins.\n      // sources: Object...\n      //\t\tOne of more objects from which to draw all properties to copy into dest. sources are processed\n      //\t\tleft-to-right and if more than one of these objects contain the same property name, the right-most\n      //\t\tvalue \"wins\".\n      // returns: Object\n      //\t\tdest, as modified\n      // description:\n      //\t\tAll properties, including functions (sometimes termed \"methods\"), excluding any non-standard extensions\n      //\t\tfound in Object.prototype, are copied/added from sources to dest. sources are processed left to right.\n      //\t\tThe Javascript assignment operator is used to copy/add each property; therefore, by default, mixin\n      //\t\texecutes a so-called \"shallow copy\" and aggregate types are copied/added by reference.\n      // example:\n      //\t\tmake a shallow copy of an object\n      //\t|\tvar copy = lang.mixin({}, source);\n      // example:\n      //\t\tmany class constructors often take an object which specifies\n      //\t\tvalues to be configured on the object. In this case, it is\n      //\t\toften simplest to call `lang.mixin` on the `this` object:\n      //\t|\tdeclare(\"acme.Base\", null, {\n      //\t|\t\tconstructor: function(properties){\n      //\t|\t\t\t// property configuration:\n      //\t|\t\t\tlang.mixin(this, properties);\n      //\t|\n      //\t|\t\t\tconsole.log(this.quip);\n      //\t|\t\t\t//\t...\n      //\t|\t\t},\n      //\t|\t\tquip: \"I wasn't born yesterday, you know - I've seen movies.\",\n      //\t|\t\t// ...\n      //\t|\t});\n      //\t|\n      //\t|\t// create an instance of the class and configure it\n      //\t|\tvar b = new acme.Base({quip: \"That's what it does!\" });\n      // example:\n      //\t\tcopy in properties from multiple objects\n      //\t|\tvar flattened = lang.mixin(\n      //\t|\t\t{\n      //\t|\t\t\tname: \"Frylock\",\n      //\t|\t\t\tbraces: true\n      //\t|\t\t},\n      //\t|\t\t{\n      //\t|\t\t\tname: \"Carl Brutanananadilewski\"\n      //\t|\t\t}\n      //\t|\t);\n      //\t|\n      //\t|\t// will print \"Carl Brutanananadilewski\"\n      //\t|\tconsole.log(flattened.name);\n      //\t|\t// will print \"true\"\n      //\t|\tconsole.log(flattened.braces);\n      if (!dest) {\n        dest = {};\n      }\n\n      for (var i = 1, l = arguments.length; i < l; i++) {\n        lang._mixin(dest, arguments[i]);\n      }\n\n      return dest; // Object\n    },\n    setObject: function (name, value, context) {\n      // summary:\n      //\t\tSet a property from a dot-separated string, such as \"A.B.C\"\n      // description:\n      //\t\tUseful for longer api chains where you have to test each object in\n      //\t\tthe chain, or when you have an object reference in string format.\n      //\t\tObjects are created as needed along `path`. Returns the passed\n      //\t\tvalue if setting is successful or `undefined` if not.\n      // name: String\n      //\t\tPath to a property, in the form \"A.B.C\".\n      // value: anything\n      //\t\tvalue or object to place at location given by name\n      // context: Object?\n      //\t\tOptional. Object to use as root of path. Defaults to\n      //\t\t`dojo.global`.\n      // example:\n      //\t\tset the value of `foo.bar.baz`, regardless of whether\n      //\t\tintermediate objects already exist:\n      //\t| lang.setObject(\"foo.bar.baz\", value);\n      // example:\n      //\t\twithout `lang.setObject`, we often see code like this:\n      //\t| // ensure that intermediate objects are available\n      //\t| if(!obj[\"parent\"]){ obj.parent = {}; }\n      //\t| if(!obj.parent[\"child\"]){ obj.parent.child = {}; }\n      //\t| // now we can safely set the property\n      //\t| obj.parent.child.prop = \"some value\";\n      //\t\twhereas with `lang.setObject`, we can shorten that to:\n      //\t| lang.setObject(\"parent.child.prop\", \"some value\", obj);\n      var parts = name.split(\".\"),\n          p = parts.pop(),\n          obj = getProp(parts, true, context);\n      return obj && p ? obj[p] = value : undefined; // Object\n    },\n    getObject: function (name, create, context) {\n      // summary:\n      //\t\tGet a property from a dot-separated string, such as \"A.B.C\"\n      // description:\n      //\t\tUseful for longer api chains where you have to test each object in\n      //\t\tthe chain, or when you have an object reference in string format.\n      // name: String\n      //\t\tPath to an property, in the form \"A.B.C\".\n      // create: Boolean?\n      //\t\tOptional. Defaults to `false`. If `true`, Objects will be\n      //\t\tcreated at any point along the 'path' that is undefined.\n      // context: Object?\n      //\t\tOptional. Object to use as root of path. Defaults to\n      //\t\t'dojo.global'. Null may be passed.\n      return !name ? context : getProp(name.split(\".\"), create, context); // Object\n    },\n    exists: function (name, obj) {\n      // summary:\n      //\t\tdetermine if an object supports a given method\n      // description:\n      //\t\tuseful for longer api chains where you have to test each object in\n      //\t\tthe chain. Useful for object and method detection.\n      // name: String\n      //\t\tPath to an object, in the form \"A.B.C\".\n      // obj: Object?\n      //\t\tObject to use as root of path. Defaults to\n      //\t\t'dojo.global'. Null may be passed.\n      // example:\n      //\t| // define an object\n      //\t| var foo = {\n      //\t|\t\tbar: { }\n      //\t| };\n      //\t|\n      //\t| // search the global scope\n      //\t| lang.exists(\"foo.bar\"); // true\n      //\t| lang.exists(\"foo.bar.baz\"); // false\n      //\t|\n      //\t| // search from a particular scope\n      //\t| lang.exists(\"bar\", foo); // true\n      //\t| lang.exists(\"bar.baz\", foo); // false\n      return lang.getObject(name, false, obj) !== undefined; // Boolean\n    },\n    // Crockford (ish) functions\n    isString: function (it) {\n      // summary:\n      //\t\tReturn true if it is a String\n      // it: anything\n      //\t\tItem to test.\n      return typeof it == \"string\" || it instanceof String; // Boolean\n    },\n    isArray: Array.isArray || function (it) {\n      // summary:\n      //\t\tReturn true if it is an Array.\n      // it: anything\n      //\t\tItem to test.\n      return opts.call(it) == \"[object Array]\"; // Boolean\n    },\n    isFunction: function (it) {\n      // summary:\n      //\t\tReturn true if it is a Function\n      // it: anything\n      //\t\tItem to test.\n      return opts.call(it) === \"[object Function]\";\n    },\n    isObject: function (it) {\n      // summary:\n      //\t\tReturns true if it is a JavaScript object (or an Array, a Function\n      //\t\tor null)\n      // it: anything\n      //\t\tItem to test.\n      return it !== undefined && (it === null || typeof it == \"object\" || lang.isArray(it) || lang.isFunction(it)); // Boolean\n    },\n    isArrayLike: function (it) {\n      // summary:\n      //\t\tsimilar to isArray() but more permissive\n      // it: anything\n      //\t\tItem to test.\n      // returns:\n      //\t\tIf it walks like a duck and quacks like a duck, return `true`\n      // description:\n      //\t\tDoesn't strongly test for \"arrayness\".  Instead, settles for \"isn't\n      //\t\ta string or number and has a length property\". Arguments objects\n      //\t\tand DOM collections will return true when passed to\n      //\t\tisArrayLike(), but will return false when passed to\n      //\t\tisArray().\n      return !!it && // Boolean\n      // keep out built-in constructors (Number, String, ...) which have length\n      // properties\n      !lang.isString(it) && !lang.isFunction(it) && !(it.tagName && it.tagName.toLowerCase() == 'form') && (lang.isArray(it) || isFinite(it.length));\n    },\n    isAlien: function (it) {\n      // summary:\n      //\t\tReturns true if it is a built-in function or some other kind of\n      //\t\toddball that *should* report as a function but doesn't\n      return it && !lang.isFunction(it) && /\\{\\s*\\[native code\\]\\s*\\}/.test(String(it)); // Boolean\n    },\n    extend: function (ctor, props) {\n      // summary:\n      //\t\tAdds all properties and methods of props to constructor's\n      //\t\tprototype, making them available to all instances created with\n      //\t\tconstructor.\n      // ctor: Object\n      //\t\tTarget constructor to extend.\n      // props: Object\n      //\t\tOne or more objects to mix into ctor.prototype\n      for (var i = 1, l = arguments.length; i < l; i++) {\n        lang._mixin(ctor.prototype, arguments[i]);\n      }\n\n      return ctor; // Object\n    },\n    _hitchArgs: function (scope, method) {\n      var pre = lang._toArray(arguments, 2);\n\n      var named = lang.isString(method);\n      return function () {\n        // arrayify arguments\n        var args = lang._toArray(arguments); // locate our method\n\n\n        var f = named ? (scope || dojo.global)[method] : method; // invoke with collected args\n\n        return f && f.apply(scope || this, pre.concat(args)); // mixed\n      }; // Function\n    },\n    hitch: function (scope, method) {\n      // summary:\n      //\t\tReturns a function that will only ever execute in the given scope.\n      //\t\tThis allows for easy use of object member functions\n      //\t\tin callbacks and other places in which the \"this\" keyword may\n      //\t\totherwise not reference the expected scope.\n      //\t\tAny number of default positional arguments may be passed as parameters\n      //\t\tbeyond \"method\".\n      //\t\tEach of these values will be used to \"placehold\" (similar to curry)\n      //\t\tfor the hitched function.\n      // scope: Object\n      //\t\tThe scope to use when method executes. If method is a string,\n      //\t\tscope is also the object containing method.\n      // method: Function|String...\n      //\t\tA function to be hitched to scope, or the name of the method in\n      //\t\tscope to be hitched.\n      // example:\n      //\t|\tlang.hitch(foo, \"bar\")();\n      //\t\truns foo.bar() in the scope of foo\n      // example:\n      //\t|\tlang.hitch(foo, myFunction);\n      //\t\treturns a function that runs myFunction in the scope of foo\n      // example:\n      //\t\tExpansion on the default positional arguments passed along from\n      //\t\thitch. Passed args are mixed first, additional args after.\n      //\t|\tvar foo = { bar: function(a, b, c){ console.log(a, b, c); } };\n      //\t|\tvar fn = lang.hitch(foo, \"bar\", 1, 2);\n      //\t|\tfn(3); // logs \"1, 2, 3\"\n      // example:\n      //\t|\tvar foo = { bar: 2 };\n      //\t|\tlang.hitch(foo, function(){ this.bar = 10; })();\n      //\t\texecute an anonymous function in scope of foo\n      if (arguments.length > 2) {\n        return lang._hitchArgs.apply(dojo, arguments); // Function\n      }\n\n      if (!method) {\n        method = scope;\n        scope = null;\n      }\n\n      if (lang.isString(method)) {\n        scope = scope || dojo.global;\n\n        if (!scope[method]) {\n          throw ['lang.hitch: scope[\"', method, '\"] is null (scope=\"', scope, '\")'].join('');\n        }\n\n        return function () {\n          return scope[method].apply(scope, arguments || []);\n        }; // Function\n      }\n\n      return !scope ? method : function () {\n        return method.apply(scope, arguments || []);\n      }; // Function\n    },\n    delegate: function () {\n      // boodman/crockford delegation w/ cornford optimization\n      function TMP() {}\n\n      return function (obj, props) {\n        TMP.prototype = obj;\n        var tmp = new TMP();\n        TMP.prototype = null;\n\n        if (props) {\n          lang._mixin(tmp, props);\n        }\n\n        return tmp; // Object\n      };\n    }(),\n\n    /*=====\n    delegate: function(obj, props){\n    \t// summary:\n    \t//\t\tReturns a new object which \"looks\" to obj for properties which it\n    \t//\t\tdoes not have a value for. Optionally takes a bag of properties to\n    \t//\t\tseed the returned object with initially.\n    \t// description:\n    \t//\t\tThis is a small implementation of the Boodman/Crockford delegation\n    \t//\t\tpattern in JavaScript. An intermediate object constructor mediates\n    \t//\t\tthe prototype chain for the returned object, using it to delegate\n    \t//\t\tdown to obj for property lookup when object-local lookup fails.\n    \t//\t\tThis can be thought of similarly to ES4's \"wrap\", save that it does\n    \t//\t\tnot act on types but rather on pure objects.\n    \t// obj: Object\n    \t//\t\tThe object to delegate to for properties not found directly on the\n    \t//\t\treturn object or in props.\n    \t// props: Object...\n    \t//\t\tan object containing properties to assign to the returned object\n    \t// returns:\n    \t//\t\tan Object of anonymous type\n    \t// example:\n    \t//\t|\tvar foo = { bar: \"baz\" };\n    \t//\t|\tvar thinger = lang.delegate(foo, { thud: \"xyzzy\"});\n    \t//\t|\tthinger.bar == \"baz\"; // delegated to foo\n    \t//\t|\tfoo.thud == undefined; // by definition\n    \t//\t|\tthinger.thud == \"xyzzy\"; // mixed in from props\n    \t//\t|\tfoo.bar = \"thonk\";\n    \t//\t|\tthinger.bar == \"thonk\"; // still delegated to foo's bar\n    },\n    =====*/\n    _toArray: has(\"ie\") ? function () {\n      function slow(obj, offset, startWith) {\n        var arr = startWith || [];\n\n        for (var x = offset || 0; x < obj.length; x++) {\n          arr.push(obj[x]);\n        }\n\n        return arr;\n      }\n\n      return function (obj) {\n        return (obj.item ? slow : efficient).apply(this, arguments);\n      };\n    }() : efficient,\n\n    /*=====\n     _toArray: function(obj, offset, startWith){\n    \t // summary:\n    \t //\t\tConverts an array-like object (i.e. arguments, DOMCollection) to an\n    \t //\t\tarray. Returns a new Array with the elements of obj.\n    \t // obj: Object\n    \t //\t\tthe object to \"arrayify\". We expect the object to have, at a\n    \t //\t\tminimum, a length property which corresponds to integer-indexed\n    \t //\t\tproperties.\n    \t // offset: Number?\n    \t //\t\tthe location in obj to start iterating from. Defaults to 0.\n    \t //\t\tOptional.\n    \t // startWith: Array?\n    \t //\t\tAn array to pack with the properties of obj. If provided,\n    \t //\t\tproperties in obj are appended at the end of startWith and\n    \t //\t\tstartWith is the returned array.\n     },\n     =====*/\n    partial: function (\n    /*Function|String*/\n    method\n    /*, ...*/\n    ) {\n      // summary:\n      //\t\tsimilar to hitch() except that the scope object is left to be\n      //\t\twhatever the execution context eventually becomes.\n      // description:\n      //\t\tCalling lang.partial is the functional equivalent of calling:\n      //\t\t|\tlang.hitch(null, funcName, ...);\n      // method:\n      //\t\tThe function to \"wrap\"\n      var arr = [null];\n      return lang.hitch.apply(dojo, arr.concat(lang._toArray(arguments))); // Function\n    },\n    clone: function (\n    /*anything*/\n    src) {\n      // summary:\n      //\t\tClones objects (including DOM nodes) and all children.\n      //\t\tWarning: do not clone cyclic structures.\n      // src:\n      //\t\tThe object to clone\n      if (!src || typeof src != \"object\" || lang.isFunction(src)) {\n        // null, undefined, any non-object, or function\n        return src; // anything\n      }\n\n      if (src.nodeType && \"cloneNode\" in src) {\n        // DOM Node\n        return src.cloneNode(true); // Node\n      }\n\n      if (src instanceof Date) {\n        // Date\n        return new Date(src.getTime()); // Date\n      }\n\n      if (src instanceof RegExp) {\n        // RegExp\n        return new RegExp(src); // RegExp\n      }\n\n      var r, i, l;\n\n      if (lang.isArray(src)) {\n        // array\n        r = [];\n\n        for (i = 0, l = src.length; i < l; ++i) {\n          if (i in src) {\n            r[i] = lang.clone(src[i]);\n          }\n        } // we don't clone functions for performance reasons\n        //\t\t}else if(d.isFunction(src)){\n        //\t\t\t// function\n        //\t\t\tr = function(){ return src.apply(this, arguments); };\n\n      } else {\n        // generic objects\n        r = src.constructor ? new src.constructor() : {};\n      }\n\n      return lang._mixin(r, src, lang.clone);\n    },\n    trim: String.prototype.trim ? function (str) {\n      return str.trim();\n    } : function (str) {\n      return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    },\n\n    /*=====\n     trim: function(str){\n    \t // summary:\n    \t //\t\tTrims whitespace from both sides of the string\n    \t // str: String\n    \t //\t\tString to be trimmed\n    \t // returns: String\n    \t //\t\tReturns the trimmed string\n    \t // description:\n    \t //\t\tThis version of trim() was selected for inclusion into the base due\n    \t //\t\tto its compact size and relatively good performance\n    \t //\t\t(see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript)\n    \t //\t\tUses String.prototype.trim instead, if available.\n    \t //\t\tThe fastest but longest version of this function is located at\n    \t //\t\tlang.string.trim()\n     },\n     =====*/\n    replace: function (tmpl, map, pattern) {\n      // summary:\n      //\t\tPerforms parameterized substitutions on a string. Throws an\n      //\t\texception if any parameter is unmatched.\n      // tmpl: String\n      //\t\tString to be used as a template.\n      // map: Object|Function\n      //\t\tIf an object, it is used as a dictionary to look up substitutions.\n      //\t\tIf a function, it is called for every substitution with following parameters:\n      //\t\ta whole match, a name, an offset, and the whole template\n      //\t\tstring (see https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/replace\n      //\t\tfor more details).\n      // pattern: RegEx?\n      //\t\tOptional regular expression objects that overrides the default pattern.\n      //\t\tMust be global and match one item. The default is: /\\{([^\\}]+)\\}/g,\n      //\t\twhich matches patterns like that: \"{xxx}\", where \"xxx\" is any sequence\n      //\t\tof characters, which doesn't include \"}\".\n      // returns: String\n      //\t\tReturns the substituted string.\n      // example:\n      //\t|\t// uses a dictionary for substitutions:\n      //\t|\tlang.replace(\"Hello, {name.first} {name.last} AKA {nick}!\",\n      //\t|\t\t{\n      //\t|\t\t\tnick: \"Bob\",\n      //\t|\t\t\tname: {\n      //\t|\t\t\t\tfirst:\t\"Robert\",\n      //\t|\t\t\t\tmiddle: \"X\",\n      //\t|\t\t\t\tlast:\t\t\"Cringely\"\n      //\t|\t\t\t}\n      //\t|\t\t});\n      //\t|\t// returns: Hello, Robert Cringely AKA Bob!\n      // example:\n      //\t|\t// uses an array for substitutions:\n      //\t|\tlang.replace(\"Hello, {0} {2}!\",\n      //\t|\t\t[\"Robert\", \"X\", \"Cringely\"]);\n      //\t|\t// returns: Hello, Robert Cringely!\n      // example:\n      //\t|\t// uses a function for substitutions:\n      //\t|\tfunction sum(a){\n      //\t|\t\tvar t = 0;\n      //\t|\t\tarrayforEach(a, function(x){ t += x; });\n      //\t|\t\treturn t;\n      //\t|\t}\n      //\t|\tlang.replace(\n      //\t|\t\t\"{count} payments averaging {avg} USD per payment.\",\n      //\t|\t\tlang.hitch(\n      //\t|\t\t\t{ payments: [11, 16, 12] },\n      //\t|\t\t\tfunction(_, key){\n      //\t|\t\t\t\tswitch(key){\n      //\t|\t\t\t\t\tcase \"count\": return this.payments.length;\n      //\t|\t\t\t\t\tcase \"min\":\t\treturn Math.min.apply(Math, this.payments);\n      //\t|\t\t\t\t\tcase \"max\":\t\treturn Math.max.apply(Math, this.payments);\n      //\t|\t\t\t\t\tcase \"sum\":\t\treturn sum(this.payments);\n      //\t|\t\t\t\t\tcase \"avg\":\t\treturn sum(this.payments) / this.payments.length;\n      //\t|\t\t\t\t}\n      //\t|\t\t\t}\n      //\t|\t\t)\n      //\t|\t);\n      //\t|\t// prints: 3 payments averaging 13 USD per payment.\n      // example:\n      //\t|\t// uses an alternative PHP-like pattern for substitutions:\n      //\t|\tlang.replace(\"Hello, ${0} ${2}!\",\n      //\t|\t\t[\"Robert\", \"X\", \"Cringely\"], /\\$\\{([^\\}]+)\\}/g);\n      //\t|\t// returns: Hello, Robert Cringely!\n      return tmpl.replace(pattern || _pattern, lang.isFunction(map) ? map : function (_, k) {\n        return lang.getObject(k, false, map);\n      });\n    }\n  };\n  has(\"extend-dojo\") && lang.mixin(dojo, lang);\n  return lang;\n});","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/node_modules/dojo/_base/lang.js"],"names":["define","dojo","has","add","i","toString","_extraNames","split","_extraLen","length","getProp","parts","create","context","scopeMap","shift","global","p","e","opts","Object","prototype","efficient","obj","offset","startWith","concat","Array","slice","call","_pattern","lang","_mixin","dest","source","copyFunc","name","s","empty","mixin","sources","l","arguments","setObject","value","pop","undefined","getObject","exists","isString","it","String","isArray","isFunction","isObject","isArrayLike","tagName","toLowerCase","isFinite","isAlien","test","extend","ctor","props","_hitchArgs","scope","method","pre","_toArray","named","args","f","apply","hitch","join","delegate","TMP","tmp","slow","arr","x","push","item","partial","clone","src","nodeType","cloneNode","Date","getTime","RegExp","r","constructor","trim","str","replace","tmpl","map","pattern","_","k"],"mappings":"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","sourcesContent":["define([\"./kernel\", \"../has\", \"../sniff\"], function(dojo, has){\n\t// module:\n\t//\t\tdojo/_base/lang\n\n\thas.add(\"bug-for-in-skips-shadowed\", function(){\n\t\t// if true, the for-in iterator skips object properties that exist in Object's prototype (IE 6 - ?)\n\t\tfor(var i in {toString: 1}){\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t});\n\n\t// Helper methods\n\tvar _extraNames =\n\t\t\thas(\"bug-for-in-skips-shadowed\") ?\n\t\t\t\t\"hasOwnProperty.valueOf.isPrototypeOf.propertyIsEnumerable.toLocaleString.toString.constructor\".split(\".\") : [],\n\n\t\t_extraLen = _extraNames.length,\n\n\t\tgetProp = function(/*Array*/parts, /*Boolean*/create, /*Object*/context){\n\t\t\tif(!context){\n\t\t\t\tif(parts[0] && dojo.scopeMap[parts[0]]) {\n\t\t\t\t\t// Voodoo code from the old days where \"dojo\" or \"dijit\" maps to some special object\n\t\t\t\t\t// rather than just window.dojo\n\t\t\t\t\tcontext = dojo.scopeMap[parts.shift()][1];\n\t\t\t\t}else{\n\t\t\t\t\tcontext = dojo.global;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry{\n\t\t\t\tfor(var i = 0; i < parts.length; i++){\n\t\t\t\t\tvar p = parts[i];\n\t\t\t\t\tif(!(p in context)){\n\t\t\t\t\t\tif(create){\n\t\t\t\t\t\t\tcontext[p] = {};\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturn;\t\t// return undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontext = context[p];\n\t\t\t\t}\n\t\t\t\treturn context; // mixed\n\t\t\t}catch(e){\n\t\t\t\t// \"p in context\" throws an exception when context is a number, boolean, etc. rather than an object,\n\t\t\t\t// so in that corner case just return undefined (by having no return statement)\n\t\t\t}\n\t\t},\n\n\t\topts = Object.prototype.toString,\n\n\t\tefficient = function(obj, offset, startWith){\n\t\t\treturn (startWith||[]).concat(Array.prototype.slice.call(obj, offset||0));\n\t\t},\n\n\t\t_pattern = /\\{([^\\}]+)\\}/g;\n\n\t// Module export\n\tvar lang = {\n\t\t// summary:\n\t\t//\t\tThis module defines Javascript language extensions.\n\n\t\t// _extraNames: String[]\n\t\t//\t\tLists property names that must be explicitly processed during for-in iteration\n\t\t//\t\tin environments that have has(\"bug-for-in-skips-shadowed\") true.\n\t\t_extraNames:_extraNames,\n\n\t\t_mixin: function(dest, source, copyFunc){\n\t\t\t// summary:\n\t\t\t//\t\tCopies/adds all properties of source to dest; returns dest.\n\t\t\t// dest: Object\n\t\t\t//\t\tThe object to which to copy/add all properties contained in source.\n\t\t\t// source: Object\n\t\t\t//\t\tThe object from which to draw all properties to copy into dest.\n\t\t\t// copyFunc: Function?\n\t\t\t//\t\tThe process used to copy/add a property in source; defaults to the Javascript assignment operator.\n\t\t\t// returns:\n\t\t\t//\t\tdest, as modified\n\t\t\t// description:\n\t\t\t//\t\tAll properties, including functions (sometimes termed \"methods\"), excluding any non-standard extensions\n\t\t\t//\t\tfound in Object.prototype, are copied/added to dest. Copying/adding each particular property is\n\t\t\t//\t\tdelegated to copyFunc (if any); copyFunc defaults to the Javascript assignment operator if not provided.\n\t\t\t//\t\tNotice that by default, _mixin executes a so-called \"shallow copy\" and aggregate types are copied/added by reference.\n\t\t\tvar name, s, i, empty = {};\n\t\t\tfor(name in source){\n\t\t\t\t// the (!(name in empty) || empty[name] !== s) condition avoids copying properties in \"source\"\n\t\t\t\t// inherited from Object.prototype.\t For example, if dest has a custom toString() method,\n\t\t\t\t// don't overwrite it with the toString() method that source inherited from Object.prototype\n\t\t\t\ts = source[name];\n\t\t\t\tif(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){\n\t\t\t\t\tdest[name] = copyFunc ? copyFunc(s) : s;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(has(\"bug-for-in-skips-shadowed\")){\n\t\t\t\tif(source){\n\t\t\t\t\tfor(i = 0; i < _extraLen; ++i){\n\t\t\t\t\t\tname = _extraNames[i];\n\t\t\t\t\t\ts = source[name];\n\t\t\t\t\t\tif(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){\n\t\t\t\t\t\t\tdest[name] = copyFunc ? copyFunc(s) : s;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dest; // Object\n\t\t},\n\n\t\tmixin: function(dest, sources){\n\t\t\t// summary:\n\t\t\t//\t\tCopies/adds all properties of one or more sources to dest; returns dest.\n\t\t\t// dest: Object\n\t\t\t//\t\tThe object to which to copy/add all properties contained in source. If dest is falsy, then\n\t\t\t//\t\ta new object is manufactured before copying/adding properties begins.\n\t\t\t// sources: Object...\n\t\t\t//\t\tOne of more objects from which to draw all properties to copy into dest. sources are processed\n\t\t\t//\t\tleft-to-right and if more than one of these objects contain the same property name, the right-most\n\t\t\t//\t\tvalue \"wins\".\n\t\t\t// returns: Object\n\t\t\t//\t\tdest, as modified\n\t\t\t// description:\n\t\t\t//\t\tAll properties, including functions (sometimes termed \"methods\"), excluding any non-standard extensions\n\t\t\t//\t\tfound in Object.prototype, are copied/added from sources to dest. sources are processed left to right.\n\t\t\t//\t\tThe Javascript assignment operator is used to copy/add each property; therefore, by default, mixin\n\t\t\t//\t\texecutes a so-called \"shallow copy\" and aggregate types are copied/added by reference.\n\t\t\t// example:\n\t\t\t//\t\tmake a shallow copy of an object\n\t\t\t//\t|\tvar copy = lang.mixin({}, source);\n\t\t\t// example:\n\t\t\t//\t\tmany class constructors often take an object which specifies\n\t\t\t//\t\tvalues to be configured on the object. In this case, it is\n\t\t\t//\t\toften simplest to call `lang.mixin` on the `this` object:\n\t\t\t//\t|\tdeclare(\"acme.Base\", null, {\n\t\t\t//\t|\t\tconstructor: function(properties){\n\t\t\t//\t|\t\t\t// property configuration:\n\t\t\t//\t|\t\t\tlang.mixin(this, properties);\n\t\t\t//\t|\n\t\t\t//\t|\t\t\tconsole.log(this.quip);\n\t\t\t//\t|\t\t\t//\t...\n\t\t\t//\t|\t\t},\n\t\t\t//\t|\t\tquip: \"I wasn't born yesterday, you know - I've seen movies.\",\n\t\t\t//\t|\t\t// ...\n\t\t\t//\t|\t});\n\t\t\t//\t|\n\t\t\t//\t|\t// create an instance of the class and configure it\n\t\t\t//\t|\tvar b = new acme.Base({quip: \"That's what it does!\" });\n\t\t\t// example:\n\t\t\t//\t\tcopy in properties from multiple objects\n\t\t\t//\t|\tvar flattened = lang.mixin(\n\t\t\t//\t|\t\t{\n\t\t\t//\t|\t\t\tname: \"Frylock\",\n\t\t\t//\t|\t\t\tbraces: true\n\t\t\t//\t|\t\t},\n\t\t\t//\t|\t\t{\n\t\t\t//\t|\t\t\tname: \"Carl Brutanananadilewski\"\n\t\t\t//\t|\t\t}\n\t\t\t//\t|\t);\n\t\t\t//\t|\n\t\t\t//\t|\t// will print \"Carl Brutanananadilewski\"\n\t\t\t//\t|\tconsole.log(flattened.name);\n\t\t\t//\t|\t// will print \"true\"\n\t\t\t//\t|\tconsole.log(flattened.braces);\n\n\t\t\tif(!dest){ dest = {}; }\n\t\t\tfor(var i = 1, l = arguments.length; i < l; i++){\n\t\t\t\tlang._mixin(dest, arguments[i]);\n\t\t\t}\n\t\t\treturn dest; // Object\n\t\t},\n\n\t\tsetObject: function(name, value, context){\n\t\t\t// summary:\n\t\t\t//\t\tSet a property from a dot-separated string, such as \"A.B.C\"\n\t\t\t// description:\n\t\t\t//\t\tUseful for longer api chains where you have to test each object in\n\t\t\t//\t\tthe chain, or when you have an object reference in string format.\n\t\t\t//\t\tObjects are created as needed along `path`. Returns the passed\n\t\t\t//\t\tvalue if setting is successful or `undefined` if not.\n\t\t\t// name: String\n\t\t\t//\t\tPath to a property, in the form \"A.B.C\".\n\t\t\t// value: anything\n\t\t\t//\t\tvalue or object to place at location given by name\n\t\t\t// context: Object?\n\t\t\t//\t\tOptional. Object to use as root of path. Defaults to\n\t\t\t//\t\t`dojo.global`.\n\t\t\t// example:\n\t\t\t//\t\tset the value of `foo.bar.baz`, regardless of whether\n\t\t\t//\t\tintermediate objects already exist:\n\t\t\t//\t| lang.setObject(\"foo.bar.baz\", value);\n\t\t\t// example:\n\t\t\t//\t\twithout `lang.setObject`, we often see code like this:\n\t\t\t//\t| // ensure that intermediate objects are available\n\t\t\t//\t| if(!obj[\"parent\"]){ obj.parent = {}; }\n\t\t\t//\t| if(!obj.parent[\"child\"]){ obj.parent.child = {}; }\n\t\t\t//\t| // now we can safely set the property\n\t\t\t//\t| obj.parent.child.prop = \"some value\";\n\t\t\t//\t\twhereas with `lang.setObject`, we can shorten that to:\n\t\t\t//\t| lang.setObject(\"parent.child.prop\", \"some value\", obj);\n\n\t\t\tvar parts = name.split(\".\"), p = parts.pop(), obj = getProp(parts, true, context);\n\t\t\treturn obj && p ? (obj[p] = value) : undefined; // Object\n\t\t},\n\n\t\tgetObject: function(name, create, context){\n\t\t\t// summary:\n\t\t\t//\t\tGet a property from a dot-separated string, such as \"A.B.C\"\n\t\t\t// description:\n\t\t\t//\t\tUseful for longer api chains where you have to test each object in\n\t\t\t//\t\tthe chain, or when you have an object reference in string format.\n\t\t\t// name: String\n\t\t\t//\t\tPath to an property, in the form \"A.B.C\".\n\t\t\t// create: Boolean?\n\t\t\t//\t\tOptional. Defaults to `false`. If `true`, Objects will be\n\t\t\t//\t\tcreated at any point along the 'path' that is undefined.\n\t\t\t// context: Object?\n\t\t\t//\t\tOptional. Object to use as root of path. Defaults to\n\t\t\t//\t\t'dojo.global'. Null may be passed.\n\t\t\treturn !name ? context : getProp(name.split(\".\"), create, context); // Object\n\t\t},\n\n\t\texists: function(name, obj){\n\t\t\t// summary:\n\t\t\t//\t\tdetermine if an object supports a given method\n\t\t\t// description:\n\t\t\t//\t\tuseful for longer api chains where you have to test each object in\n\t\t\t//\t\tthe chain. Useful for object and method detection.\n\t\t\t// name: String\n\t\t\t//\t\tPath to an object, in the form \"A.B.C\".\n\t\t\t// obj: Object?\n\t\t\t//\t\tObject to use as root of path. Defaults to\n\t\t\t//\t\t'dojo.global'. Null may be passed.\n\t\t\t// example:\n\t\t\t//\t| // define an object\n\t\t\t//\t| var foo = {\n\t\t\t//\t|\t\tbar: { }\n\t\t\t//\t| };\n\t\t\t//\t|\n\t\t\t//\t| // search the global scope\n\t\t\t//\t| lang.exists(\"foo.bar\"); // true\n\t\t\t//\t| lang.exists(\"foo.bar.baz\"); // false\n\t\t\t//\t|\n\t\t\t//\t| // search from a particular scope\n\t\t\t//\t| lang.exists(\"bar\", foo); // true\n\t\t\t//\t| lang.exists(\"bar.baz\", foo); // false\n\t\t\treturn lang.getObject(name, false, obj) !== undefined; // Boolean\n\t\t},\n\n\t\t// Crockford (ish) functions\n\n\t\tisString: function(it){\n\t\t\t// summary:\n\t\t\t//\t\tReturn true if it is a String\n\t\t\t// it: anything\n\t\t\t//\t\tItem to test.\n\t\t\treturn (typeof it == \"string\" || it instanceof String); // Boolean\n\t\t},\n\n\t\tisArray: Array.isArray || function(it){\n\t\t\t// summary:\n\t\t\t//\t\tReturn true if it is an Array.\n\t\t\t// it: anything\n\t\t\t//\t\tItem to test.\n\t\t\treturn opts.call(it) == \"[object Array]\"; // Boolean\n\t\t},\n\n\t\tisFunction: function(it){\n\t\t\t// summary:\n\t\t\t//\t\tReturn true if it is a Function\n\t\t\t// it: anything\n\t\t\t//\t\tItem to test.\n\t\t\treturn opts.call(it) === \"[object Function]\";\n\t\t},\n\n\t\tisObject: function(it){\n\t\t\t// summary:\n\t\t\t//\t\tReturns true if it is a JavaScript object (or an Array, a Function\n\t\t\t//\t\tor null)\n\t\t\t// it: anything\n\t\t\t//\t\tItem to test.\n\t\t\treturn it !== undefined &&\n\t\t\t\t(it === null || typeof it == \"object\" || lang.isArray(it) || lang.isFunction(it)); // Boolean\n\t\t},\n\n\t\tisArrayLike: function(it){\n\t\t\t// summary:\n\t\t\t//\t\tsimilar to isArray() but more permissive\n\t\t\t// it: anything\n\t\t\t//\t\tItem to test.\n\t\t\t// returns:\n\t\t\t//\t\tIf it walks like a duck and quacks like a duck, return `true`\n\t\t\t// description:\n\t\t\t//\t\tDoesn't strongly test for \"arrayness\".  Instead, settles for \"isn't\n\t\t\t//\t\ta string or number and has a length property\". Arguments objects\n\t\t\t//\t\tand DOM collections will return true when passed to\n\t\t\t//\t\tisArrayLike(), but will return false when passed to\n\t\t\t//\t\tisArray().\n\t\t\treturn !!it && // Boolean\n\t\t\t\t// keep out built-in constructors (Number, String, ...) which have length\n\t\t\t\t// properties\n\t\t\t\t!lang.isString(it) && !lang.isFunction(it) &&\n\t\t\t\t!(it.tagName && it.tagName.toLowerCase() == 'form') &&\n\t\t\t\t(lang.isArray(it) || isFinite(it.length));\n\t\t},\n\n\t\tisAlien: function(it){\n\t\t\t// summary:\n\t\t\t//\t\tReturns true if it is a built-in function or some other kind of\n\t\t\t//\t\toddball that *should* report as a function but doesn't\n\t\t\treturn it && !lang.isFunction(it) && /\\{\\s*\\[native code\\]\\s*\\}/.test(String(it)); // Boolean\n\t\t},\n\n\t\textend: function(ctor, props){\n\t\t\t// summary:\n\t\t\t//\t\tAdds all properties and methods of props to constructor's\n\t\t\t//\t\tprototype, making them available to all instances created with\n\t\t\t//\t\tconstructor.\n\t\t\t// ctor: Object\n\t\t\t//\t\tTarget constructor to extend.\n\t\t\t// props: Object\n\t\t\t//\t\tOne or more objects to mix into ctor.prototype\n\t\t\tfor(var i=1, l=arguments.length; i<l; i++){\n\t\t\t\tlang._mixin(ctor.prototype, arguments[i]);\n\t\t\t}\n\t\t\treturn ctor; // Object\n\t\t},\n\n\t\t_hitchArgs: function(scope, method){\n\t\t\tvar pre = lang._toArray(arguments, 2);\n\t\t\tvar named = lang.isString(method);\n\t\t\treturn function(){\n\t\t\t\t// arrayify arguments\n\t\t\t\tvar args = lang._toArray(arguments);\n\t\t\t\t// locate our method\n\t\t\t\tvar f = named ? (scope||dojo.global)[method] : method;\n\t\t\t\t// invoke with collected args\n\t\t\t\treturn f && f.apply(scope || this, pre.concat(args)); // mixed\n\t\t\t}; // Function\n\t\t},\n\n\t\thitch: function(scope, method){\n\t\t\t// summary:\n\t\t\t//\t\tReturns a function that will only ever execute in the given scope.\n\t\t\t//\t\tThis allows for easy use of object member functions\n\t\t\t//\t\tin callbacks and other places in which the \"this\" keyword may\n\t\t\t//\t\totherwise not reference the expected scope.\n\t\t\t//\t\tAny number of default positional arguments may be passed as parameters\n\t\t\t//\t\tbeyond \"method\".\n\t\t\t//\t\tEach of these values will be used to \"placehold\" (similar to curry)\n\t\t\t//\t\tfor the hitched function.\n\t\t\t// scope: Object\n\t\t\t//\t\tThe scope to use when method executes. If method is a string,\n\t\t\t//\t\tscope is also the object containing method.\n\t\t\t// method: Function|String...\n\t\t\t//\t\tA function to be hitched to scope, or the name of the method in\n\t\t\t//\t\tscope to be hitched.\n\t\t\t// example:\n\t\t\t//\t|\tlang.hitch(foo, \"bar\")();\n\t\t\t//\t\truns foo.bar() in the scope of foo\n\t\t\t// example:\n\t\t\t//\t|\tlang.hitch(foo, myFunction);\n\t\t\t//\t\treturns a function that runs myFunction in the scope of foo\n\t\t\t// example:\n\t\t\t//\t\tExpansion on the default positional arguments passed along from\n\t\t\t//\t\thitch. Passed args are mixed first, additional args after.\n\t\t\t//\t|\tvar foo = { bar: function(a, b, c){ console.log(a, b, c); } };\n\t\t\t//\t|\tvar fn = lang.hitch(foo, \"bar\", 1, 2);\n\t\t\t//\t|\tfn(3); // logs \"1, 2, 3\"\n\t\t\t// example:\n\t\t\t//\t|\tvar foo = { bar: 2 };\n\t\t\t//\t|\tlang.hitch(foo, function(){ this.bar = 10; })();\n\t\t\t//\t\texecute an anonymous function in scope of foo\n\t\t\tif(arguments.length > 2){\n\t\t\t\treturn lang._hitchArgs.apply(dojo, arguments); // Function\n\t\t\t}\n\t\t\tif(!method){\n\t\t\t\tmethod = scope;\n\t\t\t\tscope = null;\n\t\t\t}\n\t\t\tif(lang.isString(method)){\n\t\t\t\tscope = scope || dojo.global;\n\t\t\t\tif(!scope[method]){ throw(['lang.hitch: scope[\"', method, '\"] is null (scope=\"', scope, '\")'].join('')); }\n\t\t\t\treturn function(){ return scope[method].apply(scope, arguments || []); }; // Function\n\t\t\t}\n\t\t\treturn !scope ? method : function(){ return method.apply(scope, arguments || []); }; // Function\n\t\t},\n\n\t\tdelegate: (function(){\n\t\t\t// boodman/crockford delegation w/ cornford optimization\n\t\t\tfunction TMP(){}\n\t\t\treturn function(obj, props){\n\t\t\t\tTMP.prototype = obj;\n\t\t\t\tvar tmp = new TMP();\n\t\t\t\tTMP.prototype = null;\n\t\t\t\tif(props){\n\t\t\t\t\tlang._mixin(tmp, props);\n\t\t\t\t}\n\t\t\t\treturn tmp; // Object\n\t\t\t};\n\t\t})(),\n\t\t/*=====\n\t\tdelegate: function(obj, props){\n\t\t\t// summary:\n\t\t\t//\t\tReturns a new object which \"looks\" to obj for properties which it\n\t\t\t//\t\tdoes not have a value for. Optionally takes a bag of properties to\n\t\t\t//\t\tseed the returned object with initially.\n\t\t\t// description:\n\t\t\t//\t\tThis is a small implementation of the Boodman/Crockford delegation\n\t\t\t//\t\tpattern in JavaScript. An intermediate object constructor mediates\n\t\t\t//\t\tthe prototype chain for the returned object, using it to delegate\n\t\t\t//\t\tdown to obj for property lookup when object-local lookup fails.\n\t\t\t//\t\tThis can be thought of similarly to ES4's \"wrap\", save that it does\n\t\t\t//\t\tnot act on types but rather on pure objects.\n\t\t\t// obj: Object\n\t\t\t//\t\tThe object to delegate to for properties not found directly on the\n\t\t\t//\t\treturn object or in props.\n\t\t\t// props: Object...\n\t\t\t//\t\tan object containing properties to assign to the returned object\n\t\t\t// returns:\n\t\t\t//\t\tan Object of anonymous type\n\t\t\t// example:\n\t\t\t//\t|\tvar foo = { bar: \"baz\" };\n\t\t\t//\t|\tvar thinger = lang.delegate(foo, { thud: \"xyzzy\"});\n\t\t\t//\t|\tthinger.bar == \"baz\"; // delegated to foo\n\t\t\t//\t|\tfoo.thud == undefined; // by definition\n\t\t\t//\t|\tthinger.thud == \"xyzzy\"; // mixed in from props\n\t\t\t//\t|\tfoo.bar = \"thonk\";\n\t\t\t//\t|\tthinger.bar == \"thonk\"; // still delegated to foo's bar\n\t\t},\n\t\t=====*/\n\n\t\t_toArray: has(\"ie\") ?\n\t\t\t(function(){\n\t\t\t\tfunction slow(obj, offset, startWith){\n\t\t\t\t\tvar arr = startWith||[];\n\t\t\t\t\tfor(var x = offset || 0; x < obj.length; x++){\n\t\t\t\t\t\tarr.push(obj[x]);\n\t\t\t\t\t}\n\t\t\t\t\treturn arr;\n\t\t\t\t}\n\t\t\t\treturn function(obj){\n\t\t\t\t\treturn ((obj.item) ? slow : efficient).apply(this, arguments);\n\t\t\t\t};\n\t\t\t})() : efficient,\n\t\t/*=====\n\t\t _toArray: function(obj, offset, startWith){\n\t\t\t // summary:\n\t\t\t //\t\tConverts an array-like object (i.e. arguments, DOMCollection) to an\n\t\t\t //\t\tarray. Returns a new Array with the elements of obj.\n\t\t\t // obj: Object\n\t\t\t //\t\tthe object to \"arrayify\". We expect the object to have, at a\n\t\t\t //\t\tminimum, a length property which corresponds to integer-indexed\n\t\t\t //\t\tproperties.\n\t\t\t // offset: Number?\n\t\t\t //\t\tthe location in obj to start iterating from. Defaults to 0.\n\t\t\t //\t\tOptional.\n\t\t\t // startWith: Array?\n\t\t\t //\t\tAn array to pack with the properties of obj. If provided,\n\t\t\t //\t\tproperties in obj are appended at the end of startWith and\n\t\t\t //\t\tstartWith is the returned array.\n\t\t },\n\t\t =====*/\n\n\t\tpartial: function(/*Function|String*/ method /*, ...*/){\n\t\t\t// summary:\n\t\t\t//\t\tsimilar to hitch() except that the scope object is left to be\n\t\t\t//\t\twhatever the execution context eventually becomes.\n\t\t\t// description:\n\t\t\t//\t\tCalling lang.partial is the functional equivalent of calling:\n\t\t\t//\t\t|\tlang.hitch(null, funcName, ...);\n\t\t\t// method:\n\t\t\t//\t\tThe function to \"wrap\"\n\t\t\tvar arr = [ null ];\n\t\t\treturn lang.hitch.apply(dojo, arr.concat(lang._toArray(arguments))); // Function\n\t\t},\n\n\t\tclone: function(/*anything*/ src){\n\t\t\t// summary:\n\t\t\t//\t\tClones objects (including DOM nodes) and all children.\n\t\t\t//\t\tWarning: do not clone cyclic structures.\n\t\t\t// src:\n\t\t\t//\t\tThe object to clone\n\t\t\tif(!src || typeof src != \"object\" || lang.isFunction(src)){\n\t\t\t\t// null, undefined, any non-object, or function\n\t\t\t\treturn src;\t// anything\n\t\t\t}\n\t\t\tif(src.nodeType && \"cloneNode\" in src){\n\t\t\t\t// DOM Node\n\t\t\t\treturn src.cloneNode(true); // Node\n\t\t\t}\n\t\t\tif(src instanceof Date){\n\t\t\t\t// Date\n\t\t\t\treturn new Date(src.getTime());\t// Date\n\t\t\t}\n\t\t\tif(src instanceof RegExp){\n\t\t\t\t// RegExp\n\t\t\t\treturn new RegExp(src);   // RegExp\n\t\t\t}\n\t\t\tvar r, i, l;\n\t\t\tif(lang.isArray(src)){\n\t\t\t\t// array\n\t\t\t\tr = [];\n\t\t\t\tfor(i = 0, l = src.length; i < l; ++i){\n\t\t\t\t\tif(i in src){\n\t\t\t\t\t\tr[i] = lang.clone(src[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// we don't clone functions for performance reasons\n\t\t\t\t//\t\t}else if(d.isFunction(src)){\n\t\t\t\t//\t\t\t// function\n\t\t\t\t//\t\t\tr = function(){ return src.apply(this, arguments); };\n\t\t\t}else{\n\t\t\t\t// generic objects\n\t\t\t\tr = src.constructor ? new src.constructor() : {};\n\t\t\t}\n\t\t\treturn lang._mixin(r, src, lang.clone);\n\t\t},\n\n\n\t\ttrim: String.prototype.trim ?\n\t\t\tfunction(str){ return str.trim(); } :\n\t\t\tfunction(str){ return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, ''); },\n\t\t/*=====\n\t\t trim: function(str){\n\t\t\t // summary:\n\t\t\t //\t\tTrims whitespace from both sides of the string\n\t\t\t // str: String\n\t\t\t //\t\tString to be trimmed\n\t\t\t // returns: String\n\t\t\t //\t\tReturns the trimmed string\n\t\t\t // description:\n\t\t\t //\t\tThis version of trim() was selected for inclusion into the base due\n\t\t\t //\t\tto its compact size and relatively good performance\n\t\t\t //\t\t(see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript)\n\t\t\t //\t\tUses String.prototype.trim instead, if available.\n\t\t\t //\t\tThe fastest but longest version of this function is located at\n\t\t\t //\t\tlang.string.trim()\n\t\t },\n\t\t =====*/\n\n\t\treplace: function(tmpl, map, pattern){\n\t\t\t// summary:\n\t\t\t//\t\tPerforms parameterized substitutions on a string. Throws an\n\t\t\t//\t\texception if any parameter is unmatched.\n\t\t\t// tmpl: String\n\t\t\t//\t\tString to be used as a template.\n\t\t\t// map: Object|Function\n\t\t\t//\t\tIf an object, it is used as a dictionary to look up substitutions.\n\t\t\t//\t\tIf a function, it is called for every substitution with following parameters:\n\t\t\t//\t\ta whole match, a name, an offset, and the whole template\n\t\t\t//\t\tstring (see https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/replace\n\t\t\t//\t\tfor more details).\n\t\t\t// pattern: RegEx?\n\t\t\t//\t\tOptional regular expression objects that overrides the default pattern.\n\t\t\t//\t\tMust be global and match one item. The default is: /\\{([^\\}]+)\\}/g,\n\t\t\t//\t\twhich matches patterns like that: \"{xxx}\", where \"xxx\" is any sequence\n\t\t\t//\t\tof characters, which doesn't include \"}\".\n\t\t\t// returns: String\n\t\t\t//\t\tReturns the substituted string.\n\t\t\t// example:\n\t\t\t//\t|\t// uses a dictionary for substitutions:\n\t\t\t//\t|\tlang.replace(\"Hello, {name.first} {name.last} AKA {nick}!\",\n\t\t\t//\t|\t\t{\n\t\t\t//\t|\t\t\tnick: \"Bob\",\n\t\t\t//\t|\t\t\tname: {\n\t\t\t//\t|\t\t\t\tfirst:\t\"Robert\",\n\t\t\t//\t|\t\t\t\tmiddle: \"X\",\n\t\t\t//\t|\t\t\t\tlast:\t\t\"Cringely\"\n\t\t\t//\t|\t\t\t}\n\t\t\t//\t|\t\t});\n\t\t\t//\t|\t// returns: Hello, Robert Cringely AKA Bob!\n\t\t\t// example:\n\t\t\t//\t|\t// uses an array for substitutions:\n\t\t\t//\t|\tlang.replace(\"Hello, {0} {2}!\",\n\t\t\t//\t|\t\t[\"Robert\", \"X\", \"Cringely\"]);\n\t\t\t//\t|\t// returns: Hello, Robert Cringely!\n\t\t\t// example:\n\t\t\t//\t|\t// uses a function for substitutions:\n\t\t\t//\t|\tfunction sum(a){\n\t\t\t//\t|\t\tvar t = 0;\n\t\t\t//\t|\t\tarrayforEach(a, function(x){ t += x; });\n\t\t\t//\t|\t\treturn t;\n\t\t\t//\t|\t}\n\t\t\t//\t|\tlang.replace(\n\t\t\t//\t|\t\t\"{count} payments averaging {avg} USD per payment.\",\n\t\t\t//\t|\t\tlang.hitch(\n\t\t\t//\t|\t\t\t{ payments: [11, 16, 12] },\n\t\t\t//\t|\t\t\tfunction(_, key){\n\t\t\t//\t|\t\t\t\tswitch(key){\n\t\t\t//\t|\t\t\t\t\tcase \"count\": return this.payments.length;\n\t\t\t//\t|\t\t\t\t\tcase \"min\":\t\treturn Math.min.apply(Math, this.payments);\n\t\t\t//\t|\t\t\t\t\tcase \"max\":\t\treturn Math.max.apply(Math, this.payments);\n\t\t\t//\t|\t\t\t\t\tcase \"sum\":\t\treturn sum(this.payments);\n\t\t\t//\t|\t\t\t\t\tcase \"avg\":\t\treturn sum(this.payments) / this.payments.length;\n\t\t\t//\t|\t\t\t\t}\n\t\t\t//\t|\t\t\t}\n\t\t\t//\t|\t\t)\n\t\t\t//\t|\t);\n\t\t\t//\t|\t// prints: 3 payments averaging 13 USD per payment.\n\t\t\t// example:\n\t\t\t//\t|\t// uses an alternative PHP-like pattern for substitutions:\n\t\t\t//\t|\tlang.replace(\"Hello, ${0} ${2}!\",\n\t\t\t//\t|\t\t[\"Robert\", \"X\", \"Cringely\"], /\\$\\{([^\\}]+)\\}/g);\n\t\t\t//\t|\t// returns: Hello, Robert Cringely!\n\n\t\t\treturn tmpl.replace(pattern || _pattern, lang.isFunction(map) ?\n\t\t\t\tmap : function(_, k){ return lang.getObject(k, false, map); });\n\t\t}\n\t};\n\n\thas(\"extend-dojo\") && lang.mixin(dojo, lang);\n\n\treturn lang;\n});\n"]},"metadata":{},"sourceType":"script"}