{"ast":null,"code":"var _jsxFileName = \"/Users/Laura/Development/solar-calculator/src/components/WebMapView.js\";\n// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\nimport React from 'react';\nimport { loadModules } from 'esri-loader'; // import geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/widgets/Search'], {\n      css: true\n    }).then(([ArcGISMap, MapView, Search, lang, Draw, Graphic, GeometryService, AreasAndLengthsParameters, SimpleFillSymbol, dom, json]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n      let view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-100, 38],\n        zoom: 4\n      }); // add searchbar \n\n      let search = new Search({\n        view: view\n      });\n      view.ui.add(search, \"top-right\"); // let draw = new Draw(map);\n      // draw.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n      // draw.activate(Draw.FREEHAND_POLYGON);\n      // function outputAreaAndLength(evtObj) {\n      //   let result = evtObj.result;\n      //   console.log(json.stringify(result));\n      //   dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      //   dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n      // }\n      // function getAreaAndLength(evtObj) {\n      //   let geometry = evtObj.geometry;\n      //   map.graphics.clear();\n      //   let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n      //   //setup the parameters for the areas and lengths operation\n      //   let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      //   geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n      //   const areasAndLengthParams = new AreasAndLengthsParameters();\n      //   areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      //   areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      //   areasAndLengthParams.calculationType = \"geodesic\";\n      //   geometryService.simplify([geometry], function(simplifiedGeometries) {\n      //     areasAndLengthParams.polygons = simplifiedGeometries;\n      //     geometryService.areasAndLengths(areasAndLengthParams);\n      //   });\n      // }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"webmap esri\",\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"function() \", require([\"dojo/dom\", \"dojo/_base/lang\", \"dojo/json\", \"esri/config\", \"esri/map\", \"esri/graphic\", \"esri/geometry/Geometry\", \"esri/geometry/Extent\", \"esri/SpatialReference\", \"esri/tasks/GeometryService\", \"esri/tasks/AreasAndLengthsParameters\", \"esri/toolbars/draw\", \"esri/symbols/SimpleFillSymbol\"], function (dom, lang, json, esriConfig, Map, Graphic, Geometry, Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol) {\n      //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n      //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n      esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n      esriConfig.defaults.io.alwaysUseProxy = false;\n      let map = new Map(\"mapDiv\", {\n        basemap: \"topo\",\n        center: [-118, 34],\n        zoom: 8\n      });\n      map.on(\"load\", function () {\n        var tb = new Draw(map);\n        tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n        tb.activate(Draw.FREEHAND_POLYGON);\n      });\n      let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      geometryService.on(\"areas-and-lengths-complete\", outputAreaAndPower);\n\n      function getAreaAndLength(evtObj) {\n        let map = this,\n            geometry = evtObj.geometry;\n        map.graphics.clear();\n        let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol())); //setup the parameters for the area and power calculation\n\n        var areasAndLengthParams = new AreasAndLengthsParameters();\n        areasAndLengthParams.lengthUnit = GeometryService.UNIT_METER;\n        areasAndLengthParams.areaUnit = GeometryService.UNIT_SQUARE_METERS;\n        areasAndLengthParams.calculationType = \"geodesic\";\n        geometryService.simplify([geometry], function (simplifiedGeometries) {\n          areasAndLengthParams.polygons = simplifiedGeometries;\n          geometryService.areasAndLengths(areasAndLengthParams);\n        });\n      }\n\n      function outputAreaAndPower(evtObj) {\n        var result = evtObj.result; // area of polygon selected by user\n\n        dom.byId(\"area\").innerHTML = result.areas[0].toFixed(0) + \" m\" + \"2\".sup(); // from https://photovoltaic-software.com/principle-ressources/how-calculate-solar-energy-power-pv-systems\n        // Nominal power = A * r * H * PR, where A = total solar panel area, r = solar panel efficiency,\n        // H = annual average solar radtion on tilted panels, and PR = performance ratio, coefficient for losses\n        // Assumptions: standard test conditions (STC): radiation=1000 W/m2, cell temperature=25C, Wind speed=1 m/s, AM=1.5\n        //              r = 15%, H = 1250 kWh/m^2*year, PR = 0.75\n\n        dom.byId(\"power\").innerHTML = (result.areas[0] * 0.15 * 1250 * 0.75).toFixed(0) + \" kWh/year\";\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Laura/Development/solar-calculator/src/components/WebMapView.js"],"names":["React","loadModules","WebMapView","Component","constructor","props","mapRef","createRef","componentDidMount","css","then","ArcGISMap","MapView","Search","lang","Draw","Graphic","GeometryService","AreasAndLengthsParameters","SimpleFillSymbol","dom","json","map","basemap","view","container","current","center","zoom","search","ui","add","componentWillUnmount","render","require","esriConfig","Map","Geometry","Extent","SpatialReference","defaults","io","proxyUrl","alwaysUseProxy","on","tb","hitch","getAreaAndLength","activate","FREEHAND_POLYGON","geometryService","outputAreaAndPower","evtObj","geometry","graphics","clear","graphic","areasAndLengthParams","lengthUnit","UNIT_METER","areaUnit","UNIT_SQUARE_METERS","calculationType","simplify","simplifiedGeometries","polygons","areasAndLengths","result","byId","innerHTML","areas","toFixed","sup"],"mappings":"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","sourcesContent":["// Adapted from \"Using the ArcGIS API for JavaScript with React\"\n// found here: https://developers.arcgis.com/javascript/latest/guide/react/\n\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\n// import geometryService from '../scripts/geometryService'\n\nexport class WebMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    loadModules(['esri/Map', \n      'esri/views/MapView', \n      'esri/widgets/Search'], { css: true })\n    .then(([ArcGISMap, MapView, Search, lang, Draw, Graphic, GeometryService, \n      AreasAndLengthsParameters, SimpleFillSymbol, dom, json]) => {\n      const map = new ArcGISMap({\n        basemap: 'topo-vector'\n      });\n\n      let view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-100, 38],\n        zoom: 4\n      });\n      \n      // add searchbar \n      let search = new Search({\n        view: view\n      });\n      view.ui.add(search, \"top-right\");\n\n      // let draw = new Draw(map);\n      // draw.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n      // draw.activate(Draw.FREEHAND_POLYGON);\n\n      // function outputAreaAndLength(evtObj) {\n      //   let result = evtObj.result;\n      //   console.log(json.stringify(result));\n      //   dom.byId(\"area\").innerHTML = result.areas[0].toFixed(3) + \" acres\";\n      //   dom.byId(\"length\").innerHTML = result.lengths[0].toFixed(3) + \" feet\";\n      // }\n      \n      // function getAreaAndLength(evtObj) {\n      //   let geometry = evtObj.geometry;\n      //   map.graphics.clear();\n        \n      //   let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n        \n      //   //setup the parameters for the areas and lengths operation\n      //   let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n      //   geometryService.on(\"areas-and-lengths-complete\", outputAreaAndLength);\n\n      //   const areasAndLengthParams = new AreasAndLengthsParameters();\n      //   areasAndLengthParams.lengthUnit = GeometryService.UNIT_FOOT;\n      //   areasAndLengthParams.areaUnit = GeometryService.UNIT_ACRES;\n      //   areasAndLengthParams.calculationType = \"geodesic\";\n      //   geometryService.simplify([geometry], function(simplifiedGeometries) {\n      //     areasAndLengthParams.polygons = simplifiedGeometries;\n      //     geometryService.areasAndLengths(areasAndLengthParams);\n      //   });\n      // }\n      \n    });\n  }\n\n\n  componentWillUnmount() {\n    if (this.view) {\n      // destroy the map view\n      this.view.container = null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"webmap esri\" ref={this.mapRef}>\n        function() {\n          require([\"dojo/dom\",\n              \"dojo/_base/lang\",\n              \"dojo/json\",\n              \"esri/config\",\n              \"esri/map\",\n              \"esri/graphic\",\n              \"esri/geometry/Geometry\",\n              \"esri/geometry/Extent\",\n              \"esri/SpatialReference\",\n              \"esri/tasks/GeometryService\",\n              \"esri/tasks/AreasAndLengthsParameters\",\n              \"esri/toolbars/draw\",\n              \"esri/symbols/SimpleFillSymbol\"],\n            function(dom, lang, json, esriConfig, Map, Graphic, Geometry, \n              Extent, SpatialReference, GeometryService, AreasAndLengthsParameters, Draw, SimpleFillSymbol){\n      \n            //identify proxy page to use if the toJson payload to the geometry service is greater than 2000 characters.\n            //If this null or not available the project and lengths operation will not work.  Otherwise it will do a http post to the proxy.\n            esriConfig.defaults.io.proxyUrl = \"/proxy/\";\n            esriConfig.defaults.io.alwaysUseProxy = false;\n      \n            let map = new Map(\"mapDiv\", {\n              basemap: \"topo\",\n              center: [-118, 34],\n              zoom: 8\n            });\n            \n            map.on(\"load\", function() {\n              var tb = new Draw(map);\n              tb.on(\"draw-end\", lang.hitch(map, getAreaAndLength));\n              tb.activate(Draw.FREEHAND_POLYGON);\n            });\n            \n            let geometryService = new GeometryService(\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n            geometryService.on(\"areas-and-lengths-complete\", outputAreaAndPower);\n      \n            function getAreaAndLength(evtObj) {\n              let map = this,\n                  geometry = evtObj.geometry;\n              map.graphics.clear();\n              \n              let graphic = map.graphics.add(new Graphic(geometry, new SimpleFillSymbol()));\n              \n              //setup the parameters for the area and power calculation\n              var areasAndLengthParams = new AreasAndLengthsParameters();\n              areasAndLengthParams.lengthUnit = GeometryService.UNIT_METER;\n              areasAndLengthParams.areaUnit = GeometryService.UNIT_SQUARE_METERS;\n              areasAndLengthParams.calculationType = \"geodesic\";\n              geometryService.simplify([geometry], function(simplifiedGeometries) {\n                areasAndLengthParams.polygons = simplifiedGeometries;\n                geometryService.areasAndLengths(areasAndLengthParams);\n              });\n          }\n      \n          function outputAreaAndPower(evtObj) {\n            var result = evtObj.result;\n            // area of polygon selected by user\n            dom.byId(\"area\").innerHTML = result.areas[0].toFixed(0) + \" m\" + \"2\".sup();\n      \n            // from https://photovoltaic-software.com/principle-ressources/how-calculate-solar-energy-power-pv-systems\n            // Nominal power = A * r * H * PR, where A = total solar panel area, r = solar panel efficiency,\n            // H = annual average solar radtion on tilted panels, and PR = performance ratio, coefficient for losses\n            // Assumptions: standard test conditions (STC): radiation=1000 W/m2, cell temperature=25C, Wind speed=1 m/s, AM=1.5\n            //              r = 15%, H = 1250 kWh/m^2*year, PR = 0.75\n            dom.byId(\"power\").innerHTML = (result.areas[0] * 0.15 * 1250 * 0.75).toFixed(0) + \" kWh/year\";\n          }\n          })\n        }\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}