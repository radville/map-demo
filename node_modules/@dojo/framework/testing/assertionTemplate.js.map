{"version":3,"file":"assertionTemplate.js","sourceRoot":"","sources":["assertionTemplate.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+CAAwC;IACxC,sCAA8D;IAiB9D,IAAM,OAAO,GAAG,UAAC,KAAsB,EAAE,QAAgB;QACxD,IAAI,aAAa,GAAG,QAAQ,CAAC;QAC7B,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjC,aAAa,GAAG,cAAY,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAI,CAAC;QACpD,CAAC;QACG,IAAA,gEAAqC,EAApC,YAAI,CAAiC;QAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,aAAa,GAAG,qBAAmB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAI,CAAC;YAC1D,gEAAqC,EAApC,YAAI,CAAiC;QACvC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;;IACb,CAAC,CAAC;IAIF,IAAM,KAAK,GAAG,UAAC,IAAW;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC/B,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,WAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC,CAAC;IAEF,2BAAkC,UAAiC;QAClE,IAAM,uBAAuB,GAAQ;YACpC,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,YAAQ,CAAC,MAAM,EAAE,UAAC,IAAI;gBACrB,EAAE,CAAC,CAAC,WAAO,CAAC,IAAI,CAAC,IAAI,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpC,OAAQ,IAA2B,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;oBACvD,OAAQ,IAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;gBACjE,CAAC;YACF,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB,EAAE,QAAgB,EAAE,KAAU;YACpF,MAAM,CAAC,iBAAiB,CAAC;gBACxB,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;gBAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAClC,MAAM,CAAC,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;QACF,uBAAuB,CAAC,MAAM,GAAG,UAAC,QAAgB,EAAE,QAAiB;YACpE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC1E,CAAC,CAAC;QACF,uBAAuB,CAAC,OAAO,GAAG,UAAC,QAAgB,EAAE,QAAiB;YACrE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC3E,CAAC,CAAC;QACF,uBAAuB,CAAC,OAAO,GAAG,UAAC,QAAgB,EAAE,QAAiB;YACrE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC3E,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UACrC,QAAgB,EAChB,QAAiB,EACjB,IAAkD;YAAlD,qBAAA,EAAA,gBAAkD;YAElD,MAAM,CAAC,iBAAiB,CAAC;gBACxB,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;gBAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;gBACpC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACd,KAAK,SAAS;wBACb,IAAI,CAAC,QAAQ,oBAAO,QAAQ,EAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAChD,KAAK,CAAC;oBACP,KAAK,QAAQ;wBACZ,IAAI,CAAC,QAAQ,oBAAO,IAAI,CAAC,QAAQ,EAAK,QAAQ,CAAC,CAAC;wBAChD,KAAK,CAAC;oBACP,KAAK,SAAS;wBACb,IAAI,CAAC,QAAQ,oBAAO,QAAQ,CAAC,CAAC;wBAC9B,KAAK,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;QACF,uBAAuB,CAAC,YAAY,GAAG,UAAC,QAAgB,EAAE,QAAiB;YAC1E,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC7E,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB,EAAE,QAAiB;YACzE,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5E,CAAC,CAAC;QACF,uBAAuB,CAAC,cAAc,GAAG,UACxC,QAAgB,EAChB,QAAiB,EACjB,IAAkC;YAAlC,qBAAA,EAAA,cAAkC;YAElC,MAAM,CAAC,iBAAiB,CAAC;gBACxB,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;gBAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC9C,IAAM,MAAM,GAAI,IAAY,CAAC,MAAM,CAAC;gBACpC,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAI,WAAW,oBAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACvC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACd,KAAK,QAAQ;wBACZ,WAAW,CAAC,MAAM,OAAlB,WAAW,oBAAQ,KAAK,EAAE,CAAC,GAAK,QAAQ,GAAE;wBAC1C,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC;wBAC9B,KAAK,CAAC;oBACP,KAAK,OAAO;wBACX,WAAW,CAAC,MAAM,OAAlB,WAAW,oBAAQ,KAAK,GAAG,CAAC,EAAE,CAAC,GAAK,QAAQ,GAAE;wBAC9C,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC;wBAC9B,KAAK,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB,EAAE,QAAgB;YACxE,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB;YACtD,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;QAC5B,CAAC,CAAC;QACF,MAAM,CAAC,uBAAkD,CAAC;IAC3D,CAAC;IA5FD,8CA4FC;IAED,kBAAe,iBAAiB,CAAC","sourcesContent":["import select from './support/selector';\nimport { isWNode, isVNode, decorate } from '../widget-core/d';\nimport { VNode, WNode, DNode } from '../widget-core/interfaces';\n\nexport interface AssertionTemplateResult {\n\t(): DNode | DNode[];\n\tappend(selector: string, children: DNode[]): AssertionTemplateResult;\n\tprepend(selector: string, children: DNode[]): AssertionTemplateResult;\n\treplace(selector: string, children: DNode[]): AssertionTemplateResult;\n\tinsertBefore(selector: string, children: DNode[]): AssertionTemplateResult;\n\tinsertAfter(selector: string, children: DNode[]): AssertionTemplateResult;\n\tinsertSiblings(selector: string, children: DNode[], type?: 'before' | 'after'): AssertionTemplateResult;\n\tsetChildren(selector: string, children: DNode[], type?: 'prepend' | 'replace' | 'append'): AssertionTemplateResult;\n\tsetProperty(selector: string, property: string, value: any): AssertionTemplateResult;\n\tgetChildren(selector: string): DNode[];\n\tgetProperty(selector: string, property: string): any;\n}\n\nconst findOne = (nodes: DNode | DNode[], selector: string): DNode | undefined => {\n\tlet finalSelector = selector;\n\tif (selector.indexOf('~') === 0) {\n\t\tfinalSelector = `[\\\\~key='${selector.substr(1)}']`;\n\t}\n\tlet [node] = select(finalSelector, nodes);\n\tif (!node) {\n\t\tfinalSelector = `[assertion-key='${selector.substr(1)}']`;\n\t\t[node] = select(finalSelector, nodes);\n\t}\n\treturn node;\n};\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst guard = (node: DNode): NodeWithProperties => {\n\tif (!node) {\n\t\tthrow Error('Node not found');\n\t}\n\tif (!isWNode(node) && !isVNode(node)) {\n\t\tthrow Error('Cannot set or get on unknown node');\n\t}\n\treturn node;\n};\n\nexport function assertionTemplate(renderFunc: () => DNode | DNode[]) {\n\tconst assertionTemplateResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tdecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t\tdelete (node as NodeWithProperties).properties['assertion-key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionTemplateResult.setProperty = (selector: string, property: string, value: any) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = guard(findOne(render, selector));\n\t\t\tnode.properties[property] = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.append = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'append');\n\t};\n\tassertionTemplateResult.prepend = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'prepend');\n\t};\n\tassertionTemplateResult.replace = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'replace');\n\t};\n\tassertionTemplateResult.setChildren = (\n\t\tselector: string,\n\t\tchildren: DNode[],\n\t\ttype: 'prepend' | 'replace' | 'append' = 'replace'\n\t) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = guard(findOne(render, selector));\n\t\t\tnode.children = node.children || [];\n\t\t\tswitch (type) {\n\t\t\t\tcase 'prepend':\n\t\t\t\t\tnode.children = [...children, ...node.children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'append':\n\t\t\t\t\tnode.children = [...node.children, ...children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'replace':\n\t\t\t\t\tnode.children = [...children];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.insertBefore = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.insertSiblings(selector, children, 'before');\n\t};\n\tassertionTemplateResult.insertAfter = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.insertSiblings(selector, children, 'after');\n\t};\n\tassertionTemplateResult.insertSiblings = (\n\t\tselector: string,\n\t\tchildren: DNode[],\n\t\ttype: 'before' | 'after' = 'after'\n\t) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = guard(findOne(render, selector));\n\t\t\tconst parent = (node as any).parent;\n\t\t\tconst index = parent.children.indexOf(node);\n\t\t\tlet newChildren = [...parent.children];\n\t\t\tswitch (type) {\n\t\t\t\tcase 'before':\n\t\t\t\t\tnewChildren.splice(index, 0, ...children);\n\t\t\t\t\tparent.children = newChildren;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'after':\n\t\t\t\t\tnewChildren.splice(index + 1, 0, ...children);\n\t\t\t\t\tparent.children = newChildren;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.getProperty = (selector: string, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.properties[property];\n\t};\n\tassertionTemplateResult.getChildren = (selector: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.children || [];\n\t};\n\treturn assertionTemplateResult as AssertionTemplateResult;\n}\n\nexport default assertionTemplate;\n"]}