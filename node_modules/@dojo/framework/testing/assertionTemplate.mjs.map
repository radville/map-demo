{"version":3,"file":"assertionTemplate.mjs","sourceRoot":"","sources":["assertionTemplate.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,oBAAoB,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAiB9D,MAAM,OAAO,GAAG,CAAC,KAAsB,EAAE,QAAgB,EAAqB,EAAE;IAC/E,IAAI,aAAa,GAAG,QAAQ,CAAC;IAC7B,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,aAAa,GAAG,YAAY,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IACpD,CAAC;IACD,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACX,aAAa,GAAG,mBAAmB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QAC1D,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACb,CAAC,CAAC;AAIF,MAAM,KAAK,GAAG,CAAC,IAAW,EAAsB,EAAE;IACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACX,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC/B,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;IAClD,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,4BAA4B,UAAiC;IAClE,MAAM,uBAAuB,GAAQ,GAAG,EAAE;QACzC,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;QAC5B,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;YACzB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpC,OAAQ,IAA2B,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACvD,OAAQ,IAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;YACjE,CAAC;QACF,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC;IACf,CAAC,CAAC;IACF,uBAAuB,CAAC,WAAW,GAAG,CAAC,QAAgB,EAAE,QAAgB,EAAE,KAAU,EAAE,EAAE;QACxF,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YAC7B,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,uBAAuB,CAAC,MAAM,GAAG,CAAC,QAAgB,EAAE,QAAiB,EAAE,EAAE;QACxE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC,CAAC;IACF,uBAAuB,CAAC,OAAO,GAAG,CAAC,QAAgB,EAAE,QAAiB,EAAE,EAAE;QACzE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC3E,CAAC,CAAC;IACF,uBAAuB,CAAC,OAAO,GAAG,CAAC,QAAgB,EAAE,QAAiB,EAAE,EAAE;QACzE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC3E,CAAC,CAAC;IACF,uBAAuB,CAAC,WAAW,GAAG,CACrC,QAAgB,EAChB,QAAiB,EACjB,OAAyC,SAAS,EACjD,EAAE;QACH,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YAC7B,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YACpC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACd,KAAK,SAAS;oBACb,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAChD,KAAK,CAAC;gBACP,KAAK,QAAQ;oBACZ,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,QAAQ,CAAC,CAAC;oBAChD,KAAK,CAAC;gBACP,KAAK,SAAS;oBACb,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;oBAC9B,KAAK,CAAC;YACR,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,uBAAuB,CAAC,YAAY,GAAG,CAAC,QAAgB,EAAE,QAAiB,EAAE,EAAE;QAC9E,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC7E,CAAC,CAAC;IACF,uBAAuB,CAAC,WAAW,GAAG,CAAC,QAAgB,EAAE,QAAiB,EAAE,EAAE;QAC7E,MAAM,CAAC,uBAAuB,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC,CAAC;IACF,uBAAuB,CAAC,cAAc,GAAG,CACxC,QAAgB,EAChB,QAAiB,EACjB,OAA2B,OAAO,EACjC,EAAE;QACH,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YAC7B,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAI,IAAY,CAAC,MAAM,CAAC;YACpC,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,WAAW,GAAG,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACd,KAAK,QAAQ;oBACZ,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC;oBAC1C,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC;oBAC9B,KAAK,CAAC;gBACP,KAAK,OAAO;oBACX,WAAW,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC;oBAC9C,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC;oBAC9B,KAAK,CAAC;YACR,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,uBAAuB,CAAC,WAAW,GAAG,CAAC,QAAgB,EAAE,QAAgB,EAAE,EAAE;QAC5E,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC;IACF,uBAAuB,CAAC,WAAW,GAAG,CAAC,QAAgB,EAAE,EAAE;QAC1D,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;IAC5B,CAAC,CAAC;IACF,MAAM,CAAC,uBAAkD,CAAC;AAC3D,CAAC;AAED,eAAe,iBAAiB,CAAC","sourcesContent":["import select from './support/selector';\nimport { isWNode, isVNode, decorate } from '../widget-core/d';\nimport { VNode, WNode, DNode } from '../widget-core/interfaces';\n\nexport interface AssertionTemplateResult {\n\t(): DNode | DNode[];\n\tappend(selector: string, children: DNode[]): AssertionTemplateResult;\n\tprepend(selector: string, children: DNode[]): AssertionTemplateResult;\n\treplace(selector: string, children: DNode[]): AssertionTemplateResult;\n\tinsertBefore(selector: string, children: DNode[]): AssertionTemplateResult;\n\tinsertAfter(selector: string, children: DNode[]): AssertionTemplateResult;\n\tinsertSiblings(selector: string, children: DNode[], type?: 'before' | 'after'): AssertionTemplateResult;\n\tsetChildren(selector: string, children: DNode[], type?: 'prepend' | 'replace' | 'append'): AssertionTemplateResult;\n\tsetProperty(selector: string, property: string, value: any): AssertionTemplateResult;\n\tgetChildren(selector: string): DNode[];\n\tgetProperty(selector: string, property: string): any;\n}\n\nconst findOne = (nodes: DNode | DNode[], selector: string): DNode | undefined => {\n\tlet finalSelector = selector;\n\tif (selector.indexOf('~') === 0) {\n\t\tfinalSelector = `[\\\\~key='${selector.substr(1)}']`;\n\t}\n\tlet [node] = select(finalSelector, nodes);\n\tif (!node) {\n\t\tfinalSelector = `[assertion-key='${selector.substr(1)}']`;\n\t\t[node] = select(finalSelector, nodes);\n\t}\n\treturn node;\n};\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst guard = (node: DNode): NodeWithProperties => {\n\tif (!node) {\n\t\tthrow Error('Node not found');\n\t}\n\tif (!isWNode(node) && !isVNode(node)) {\n\t\tthrow Error('Cannot set or get on unknown node');\n\t}\n\treturn node;\n};\n\nexport function assertionTemplate(renderFunc: () => DNode | DNode[]) {\n\tconst assertionTemplateResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tdecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t\tdelete (node as NodeWithProperties).properties['assertion-key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionTemplateResult.setProperty = (selector: string, property: string, value: any) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = guard(findOne(render, selector));\n\t\t\tnode.properties[property] = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.append = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'append');\n\t};\n\tassertionTemplateResult.prepend = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'prepend');\n\t};\n\tassertionTemplateResult.replace = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'replace');\n\t};\n\tassertionTemplateResult.setChildren = (\n\t\tselector: string,\n\t\tchildren: DNode[],\n\t\ttype: 'prepend' | 'replace' | 'append' = 'replace'\n\t) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = guard(findOne(render, selector));\n\t\t\tnode.children = node.children || [];\n\t\t\tswitch (type) {\n\t\t\t\tcase 'prepend':\n\t\t\t\t\tnode.children = [...children, ...node.children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'append':\n\t\t\t\t\tnode.children = [...node.children, ...children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'replace':\n\t\t\t\t\tnode.children = [...children];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.insertBefore = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.insertSiblings(selector, children, 'before');\n\t};\n\tassertionTemplateResult.insertAfter = (selector: string, children: DNode[]) => {\n\t\treturn assertionTemplateResult.insertSiblings(selector, children, 'after');\n\t};\n\tassertionTemplateResult.insertSiblings = (\n\t\tselector: string,\n\t\tchildren: DNode[],\n\t\ttype: 'before' | 'after' = 'after'\n\t) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = guard(findOne(render, selector));\n\t\t\tconst parent = (node as any).parent;\n\t\t\tconst index = parent.children.indexOf(node);\n\t\t\tlet newChildren = [...parent.children];\n\t\t\tswitch (type) {\n\t\t\t\tcase 'before':\n\t\t\t\t\tnewChildren.splice(index, 0, ...children);\n\t\t\t\t\tparent.children = newChildren;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'after':\n\t\t\t\t\tnewChildren.splice(index + 1, 0, ...children);\n\t\t\t\t\tparent.children = newChildren;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.getProperty = (selector: string, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.properties[property];\n\t};\n\tassertionTemplateResult.getChildren = (selector: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.children || [];\n\t};\n\treturn assertionTemplateResult as AssertionTemplateResult;\n}\n\nexport default assertionTemplate;\n"]}