import { Destroyable } from '../../core/Destroyable';
import Map from '../../shim/Map';
import WeakMap from '../../shim/WeakMap';
export class Block extends Destroyable {
    constructor(properties) {
        super();
        this._moduleMap = new WeakMap();
        this._invalidate = properties.invalidate;
    }
    run(module) {
        const decoratedModule = (...args) => {
            const argsString = JSON.stringify(args);
            let valueMap = this._moduleMap.get(module);
            if (valueMap) {
                const cachedValue = valueMap.get(argsString);
                if (cachedValue !== undefined) {
                    return cachedValue;
                }
            }
            const result = module(...args);
            if (result && typeof result.then === 'function') {
                result.then((result) => {
                    if (!valueMap) {
                        valueMap = new Map();
                        this._moduleMap.set(module, valueMap);
                    }
                    valueMap.set(argsString, result);
                    this._invalidate();
                });
                return null;
            }
            return result;
        };
        return decoratedModule;
    }
}
export default Block;
//# sourceMappingURL=Block.mjs.map