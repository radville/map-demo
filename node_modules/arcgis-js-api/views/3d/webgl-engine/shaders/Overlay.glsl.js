// COPYRIGHT Â© 2019 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.14/esri/copyright.txt for details.

define(["require","exports","../../../../core/tsSupport/makeTemplateObjectHelper","../core/shaderLibrary/shading/Water.glsl","../core/shaderLibrary/util/ColorConversion.glsl","../core/shaderModules/interfaces"],function(e,o,r,n,t,l){function a(e,o){o.usePBRforWater&&e.include(n.Water,o),e.include(t.ColorConversion,{stages:1}),e.vertex.uniforms.add("overlayTexOffset","vec4"),e.vertex.uniforms.add("overlayTexScale","vec4"),e.varyings.add("vtcOverlay","vec4"),e.vertex.code.add(l.glsl(c||(c=r(["\n    void setOverlayVTC(in vec2 uv) {\n      vtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;\n    }\n  "],["\n    void setOverlayVTC(in vec2 uv) {\n      vtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;\n    }\n  "])))),e.fragment.uniforms.add("ovInnerColorTex","sampler2D"),e.fragment.uniforms.add("ovOuterColorTex","sampler2D"),e.fragment.uniforms.add("overlayOpacity","float"),e.fragment.code.add(l.glsl(v||(v=r(["\n    vec4 getOverlayColor(sampler2D ov0Tex, sampler2D ov1Tex, vec4 texCoords) {\n      vec4 color = vec4(0.0);\n\n      // read textures outside of conditions, to avoid artifacts likely related to non-uniform flow control:\n      // - https://www.khronos.org/opengl/wiki/Sampler_(GLSL)#Non-uniform_flow_control\n      // - https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/13657\n      vec4 color0 = texture2D(ov0Tex, texCoords.xy);\n      vec4 color1 = texture2D(ov1Tex, texCoords.zw);\n\n      if ((texCoords.x > 0.0) && (texCoords.x < 1.0) && (texCoords.y > 0.0) && (texCoords.y < 1.0)) {\n        color = color0;\n      } else if ((texCoords.z > 0.0) && (texCoords.z < 1.0) && (texCoords.w > 0.0) && (texCoords.w < 1.0)) {\n        color = color1;\n      }\n\n      return color;\n    }\n  "],["\n    vec4 getOverlayColor(sampler2D ov0Tex, sampler2D ov1Tex, vec4 texCoords) {\n      vec4 color = vec4(0.0);\n\n      // read textures outside of conditions, to avoid artifacts likely related to non-uniform flow control:\n      // - https://www.khronos.org/opengl/wiki/Sampler_(GLSL)#Non-uniform_flow_control\n      // - https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/13657\n      vec4 color0 = texture2D(ov0Tex, texCoords.xy);\n      vec4 color1 = texture2D(ov1Tex, texCoords.zw);\n\n      if ((texCoords.x > 0.0) && (texCoords.x < 1.0) && (texCoords.y > 0.0) && (texCoords.y < 1.0)) {\n        color = color0;\n      } else if ((texCoords.z > 0.0) && (texCoords.z < 1.0) && (texCoords.w > 0.0) && (texCoords.w < 1.0)) {\n        color = color1;\n      }\n\n      return color;\n    }\n  "])))),e.fragment.code.add(l.glsl(s||(s=r(["\n    vec4 getCombinedOverlayColor() {\n      return overlayOpacity * getOverlayColor(ovInnerColorTex, ovOuterColorTex, vtcOverlay);\n    }\n  "],["\n    vec4 getCombinedOverlayColor() {\n      return overlayOpacity * getOverlayColor(ovInnerColorTex, ovOuterColorTex, vtcOverlay);\n    }\n  "])))),!0===o.usePBRforWater&&e.fragment.code.add(l.glsl(i||(i=r(["\n    vec4 getOverlayWaterColor( in vec4 tileColor, vec4 maskInput, vec4 colorInput,\n                        vec3 vpos, float shadow, vec3 localUp, vec3 eye, mat3 tbn) {\n\n      // reproject normal from 0...1 => -1...1\n      // and project it to worldspace.\n      vec3 n = normalize(tbn *  (2.0 * maskInput.rgb - vec3(1.0)));\n      vec3 v = -normalize(vpos - eye);\n      vec3 l = normalize(-lightingMainDirection);\n      vec3 final = getSeaColor(n, v, l, colorInput.rgb, lightingMainIntensity, localUp, 1.0 - shadow);\n\n      // the terrain renderer assumes a premultiplied color output without gamma.\n      return premultiplyAlpha(vec4(final, colorInput.w));\n    }\n    "],["\n    vec4 getOverlayWaterColor( in vec4 tileColor, vec4 maskInput, vec4 colorInput,\n                        vec3 vpos, float shadow, vec3 localUp, vec3 eye, mat3 tbn) {\n\n      // reproject normal from 0...1 => -1...1\n      // and project it to worldspace.\n      vec3 n = normalize(tbn *  (2.0 * maskInput.rgb - vec3(1.0)));\n      vec3 v = -normalize(vpos - eye);\n      vec3 l = normalize(-lightingMainDirection);\n      vec3 final = getSeaColor(n, v, l, colorInput.rgb, lightingMainIntensity, localUp, 1.0 - shadow);\n\n      // the terrain renderer assumes a premultiplied color output without gamma.\n      return premultiplyAlpha(vec4(final, colorInput.w));\n    }\n    "]))))}Object.defineProperty(o,"__esModule",{value:!0}),o.Overlay=a;var c,v,s,i});