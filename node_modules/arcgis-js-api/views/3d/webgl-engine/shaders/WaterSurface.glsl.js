// COPYRIGHT Â© 2019 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.14/esri/copyright.txt for details.

define(["require","exports","../../../../core/tsSupport/makeTemplateObjectHelper","../core/shaderLibrary/ForwardLinearDepth.glsl","../core/shaderLibrary/Slice.glsl","../core/shaderLibrary/Transform.glsl","../core/shaderLibrary/shading/NormalUtils.glsl","../core/shaderLibrary/shading/ReadShadowMap.glsl","../core/shaderLibrary/shading/Water.glsl","../core/shaderLibrary/shading/WaterDistortion.glsl","../core/shaderModules/interfaces","../core/shaderModules/ShaderBuilder"],function(n,a,e,o,r,i,t,l,d,v,s,c){function g(n){var a=new c.ShaderBuilder;return a.include(i.Transform,{linearDepth:!1}),a.attributes.add("position","vec3"),a.attributes.add("uv0","vec2"),a.vertex.uniforms.add("proj","mat4").add("view","mat4").add("model","mat4").add("localOrigin","vec3"),0===n.output&&(a.include(t.NormalUtils,n),a.include(o.ForwardLinearDepth,n),a.varyings.add("vuv","vec2"),a.varyings.add("vpos","vec3"),a.varyings.add("vnormal","vec3"),a.varyings.add("vtbnMatrix","mat3"),a.vertex.code.add(s.glsl(m||(m=e(["\n      void main(void) {\n        vuv = uv0;\n        vpos = (model * vec4(position, 1.0)).xyz;\n\n        vnormal = getLocalUp(vpos, localOrigin);\n        vtbnMatrix = getTBNMatrix(vnormal);\n\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardLinearDepth();\n      }\n    "],["\n      void main(void) {\n        vuv = uv0;\n        vpos = (model * vec4(position, 1.0)).xyz;\n\n        vnormal = getLocalUp(vpos, localOrigin);\n        vtbnMatrix = getTBNMatrix(vnormal);\n\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardLinearDepth();\n      }\n    "])))),a.include(v.WaterDistortion,n),a.include(r.Slice,n),n.receiveShadows&&a.include(l.ReadShadowMap,n),a.include(d.Water,n),a.fragment.uniforms.add("waterColor","vec4").add("lightingMainDirection","vec3").add("lightingMainIntensity","vec3").add("camPos","vec3").add("timeElapsed","float"),a.fragment.code.add(s.glsl(p||(p=e(["\n      void main() {\n        discardBySlice(vpos);\n        vec3 localUp = vnormal;\n        // the created normal is in tangent space\n        vec3 tangentNormal = getSurfaceNormal(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n = normalize(vtbnMatrix * tangentNormal);\n        vec3 v = -normalize(vpos - camPos);\n        vec3 l = normalize(-lightingMainDirection);\n        "],["\n      void main() {\n        discardBySlice(vpos);\n        vec3 localUp = vnormal;\n        // the created normal is in tangent space\n        vec3 tangentNormal = getSurfaceNormal(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n = normalize(vtbnMatrix * tangentNormal);\n        vec3 v = -normalize(vpos - camPos);\n        vec3 l = normalize(-lightingMainDirection);\n        "])))),n.receiveShadows?a.fragment.code.add(s.glsl(h||(h=e(["\n        float shadow = 1.0 - readShadowMap(vpos, linearDepth);\n      "],["\n        float shadow = 1.0 - readShadowMap(vpos, linearDepth);\n      "])))):a.fragment.code.add(s.glsl(u||(u=e(["\n        float shadow = 1.0;\n      "],["\n        float shadow = 1.0;\n      "])))),a.fragment.code.add(s.glsl(f||(f=e(["\n        vec4 final = vec4(getSeaColor(n, v, l, waterColor.rgb, lightingMainIntensity, localUp, shadow), waterColor.w);\n\n        // gamma correction\n        gl_FragColor = delinearizeGamma(final);\n        gl_FragColor = highlightSlice(gl_FragColor, vpos);\n      }\n    "],["\n        vec4 final = vec4(getSeaColor(n, v, l, waterColor.rgb, lightingMainIntensity, localUp, shadow), waterColor.w);\n\n        // gamma correction\n        gl_FragColor = delinearizeGamma(final);\n        gl_FragColor = highlightSlice(gl_FragColor, vpos);\n      }\n    "]))))),2===n.output&&(a.include(t.NormalUtils,n),a.include(v.WaterDistortion,n),a.include(r.Slice,n),a.varyings.add("vpos","vec3"),a.varyings.add("vuv","vec2"),a.vertex.code.add(s.glsl(w||(w=e(["\n        void main(void) {\n          vuv = uv0;\n          vpos = (model * vec4(position, 1.0)).xyz;\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    "],["\n        void main(void) {\n          vuv = uv0;\n          vpos = (model * vec4(position, 1.0)).xyz;\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    "])))),a.fragment.uniforms.add("timeElapsed","float"),a.fragment.code.add(s.glsl(y||(y=e(["\n        void main() {\n          discardBySlice(vpos);\n          // the created normal is in tangent space\n          vec3 tangentNormal = getSurfaceNormal(vuv, timeElapsed);\n          tangentNormal = normalize(tangentNormal);\n          gl_FragColor = vec4((tangentNormal + vec3(1.0)) * 0.5, 0.0);\n        }\n    "],["\n        void main() {\n          discardBySlice(vpos);\n          // the created normal is in tangent space\n          vec3 tangentNormal = getSurfaceNormal(vuv, timeElapsed);\n          tangentNormal = normalize(tangentNormal);\n          gl_FragColor = vec4((tangentNormal + vec3(1.0)) * 0.5, 0.0);\n        }\n    "]))))),5===n.output&&(a.include(t.NormalUtils,n),a.varyings.add("vpos","vec3"),a.vertex.code.add(s.glsl(S||(S=e(["\n        void main(void) {\n          vpos = (model * vec4(position, 1.0)).xyz;\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    "],["\n        void main(void) {\n          vpos = (model * vec4(position, 1.0)).xyz;\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    "])))),a.fragment.uniforms.add("waterColor","vec4"),a.fragment.code.add(s.glsl(M||(M=e(["\n        void main() {\n          gl_FragColor = waterColor;\n        }\n    "],["\n        void main() {\n          gl_FragColor = waterColor;\n        }\n    "]))))),a}Object.defineProperty(a,"__esModule",{value:!0}),a.build=g;var m,p,h,u,f,w,y,S,M});