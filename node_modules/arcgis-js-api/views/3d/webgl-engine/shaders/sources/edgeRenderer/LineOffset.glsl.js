// COPYRIGHT Â© 2019 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.14/esri/copyright.txt for details.

define(["require","exports","../../../../../../core/tsSupport/makeTemplateObjectHelper","../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl","../../../core/shaderModules/interfaces","./EdgeUtil.glsl","./UnpackAttributes.glsl"],function(e,t,n,a,r,u,l){function c(e,t){var c=e.vertex;e.include(l.UnpackAttributes,t);var v=e.fragment;switch(e.include(a.RgbaFloatEncoding),u.EdgeUtil.usesSketchLogic(t)&&(c.uniforms.add("uStrokesTextureScale","vec2"),c.uniforms.add("uStrokesLog2Resolution","float"),c.uniforms.add("uStrokeVariants","float"),e.varyings.add("vStrokeUV","vec2"),v.uniforms.add("uStrokesTexture","sampler2D"),v.uniforms.add("uStrokesNormalizationScale","float"),c.code.add(r.glsl(s||(s=n(["\n      void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {\n        vec2 sidenessNorm = unpackedAttributes.sidenessNorm;\n\n        float lineIndex = clamp(ceil(log2(lineLength)), 0.0, uStrokesLog2Resolution);\n\n        vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * uStrokeVariants + variantStroke + 0.5) * uStrokesTextureScale;\n        vStrokeUV.x += variantOffset;\n      }\n    "],["\n      void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {\n        vec2 sidenessNorm = unpackedAttributes.sidenessNorm;\n\n        float lineIndex = clamp(ceil(log2(lineLength)), 0.0, uStrokesLog2Resolution);\n\n        vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * uStrokeVariants + variantStroke + 0.5) * uStrokesTextureScale;\n        vStrokeUV.x += variantOffset;\n      }\n    "])))),v.code.add(r.glsl(i||(i=n(["\n      float calculateLineOffsetSketch() {\n        float offsetNorm = rgba2float(texture2D(uStrokesTexture, vStrokeUV));\n        return (offsetNorm - 0.5) * uStrokesNormalizationScale;\n      }\n\n      float calculateLinePressureSketch() {\n        return rgba2float(texture2D(uStrokesTexture, vStrokeUV + vec2(0.0, 0.5)));\n      }\n    "],["\n      float calculateLineOffsetSketch() {\n        float offsetNorm = rgba2float(texture2D(uStrokesTexture, vStrokeUV));\n        return (offsetNorm - 0.5) * uStrokesNormalizationScale;\n      }\n\n      float calculateLinePressureSketch() {\n        return rgba2float(texture2D(uStrokesTexture, vStrokeUV + vec2(0.0, 0.5)));\n      }\n    "]))))),t.mode){case 0:c.code.add(r.glsl(o||(o=n(["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}\n      "],["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}\n      "])))),v.code.add(r.glsl(d||(d=n(["\n        float calculateLineOffset() {\n          return 0.0;\n        }\n\n        float calculateLinePressure() {\n          return 1.0;\n        }\n      "],["\n        float calculateLineOffset() {\n          return 0.0;\n        }\n\n        float calculateLinePressure() {\n          return 1.0;\n        }\n      "]))));break;case 1:c.code.add(r.glsl(f||(f=n(["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n        }\n      "],["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n        }\n      "])))),v.code.add(r.glsl(k||(k=n(["\n        float calculateLineOffset() {\n          return calculateLineOffsetSketch();\n        }\n\n        float calculateLinePressure() {\n          return calculateLinePressureSketch();\n        }\n      "],["\n        float calculateLineOffset() {\n          return calculateLineOffsetSketch();\n        }\n\n        float calculateLinePressure() {\n          return calculateLinePressureSketch();\n        }\n      "]))));break;case 2:e.varyings.add("vType","float"),c.code.add(r.glsl(S||(S=n(["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          vType = unpackedAttributes.type;\n\n          if (unpackedAttributes.type <= 0.0) {\n            calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n          }\n        }\n      "],["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          vType = unpackedAttributes.type;\n\n          if (unpackedAttributes.type <= 0.0) {\n            calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n          }\n        }\n      "])))),v.code.add(r.glsl(p||(p=n(["\n        float calculateLineOffset() {\n          if (vType <= 0.0) {\n            return calculateLineOffsetSketch();\n          }\n          else {\n            return 0.0;\n          }\n        }\n\n        float calculateLinePressure() {\n          if (vType <= 0.0) {\n            return calculateLinePressureSketch();\n          }\n          else {\n            return 1.0;\n          }\n        }\n      "],["\n        float calculateLineOffset() {\n          if (vType <= 0.0) {\n            return calculateLineOffsetSketch();\n          }\n          else {\n            return 0.0;\n          }\n        }\n\n        float calculateLinePressure() {\n          if (vType <= 0.0) {\n            return calculateLinePressureSketch();\n          }\n          else {\n            return 1.0;\n          }\n        }\n      "]))))}}Object.defineProperty(t,"__esModule",{value:!0}),t.LineOffset=c;var s,i,o,d,f,k,S,p});